### ===========================================================
NV4G43L2NFGGMRDF
### ===========================================================
changes 11.7.2019:
------------------
DROP fac, fac_location, store, pod TABLEs
NEW TABLES made: location FK for FAC and POS added, user_id FK added for POS,
no open FK for FAC_LOCATION table
===============================================================
changes 26.7.2019:
------------------
DROP fac, fac_location, store, orders;
NEW TABLES made: location FK for FAC and POS added, user_id FK added for POS,
no open FK for FAC_LOCATION table
===============================================================



# ==== GEO =================================================
# city.ALT - name in short

CREATE TABLE city (
id INT AUTO_INCREMENT NOT NULL UNIQUE PRIMARY KEY,
name JSON,
alt JSON,
zone INT,
code INT UNIQUE NOT NULL,
c_status TINYINT unsigned DEFAULT 2,
c_owner TINYINT unsigned NOT NULL DEFAULT 1,
c_group TINYINT(2) signed NOT NULL DEFAULT 1,
c_permis INT unsigned DEFAULT 457
)

CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;
UPDATE city SET alt='{"bg": "Лозенец(ЮП)", "en": "Lozenets(SP)", "es": "Lozenets(SP)"}' WHERE id=12;
UPDATE city SET alt='{"bg": "Стрелбище", "en": "kv.Strelbiste", "es": "kv.Strelbiste"}' WHERE id=13;
UPDATE city SET alt='{"bg": "кв.Иван Вазов", "en": "kv.Ivan Wazov", "es": "kv.Ivan Vazov"}' WHERE id=14;
UPDATE city SET alt='{"bg": "Лагера", "en": "Lagera", "es": "Lagera"}' WHERE id=15;
UPDATE city SET alt='{"bg": "Лозенец(Бор.г-на)", "en": "Lozenets(BG)", "es": "Lozenets(BG)"}' WHERE id=17;
UPDATE city SET alt='{"bg": "СЗ-Жабките", "en": "SZ-Zhabkite", "es": "SZ-Zhabkite"}' WHERE id=18;

INSERT INTO city (name,alt,code,zone,c_status) VALUES
('{"en": "Sofia-Lozenets(Yuzh.Park)","bg":"София-Лозенец(Южен Парк)","es":"Sofia-Lozenets(Yuzh.Park)"}',1421,8,4),
('{"en": "Sofia-Strelbiste","bg":"София-Стрелбище","es":"Sofia-Strelbiste"}',1404,9,4),
('{"en": "Sofia-Ivan Vazov","bg":"София-Иван Вазов","es":"Sofia-Ivan Vazov"}',1408,10,4),
('{"en": "Sofia-Lagera","bg":"София-Лагера","es":"Sofia-Lagera"}',1612,11,4),
('{"en": "Sofia-Lozenets(Borisova Grad.)","bg":"София-Лозенец(Борисова г-на)","es":"Sofia-Lozenets(Borisova Grad.)"}',1164,11,4),
('{"en": "Stara Zagora-Zhabkite","bg":"Стара Загора-Жабките","es":"Stara Zagora-Zhabkite"}';
;

# LAT-LONG = street direction (long:E/W or lat:N/S)
# DIAG: NW/SE=0  NE/SW=1

CREATE TABLE street (
id INT AUTO_INCREMENT NOT NULL UNIQUE PRIMARY KEY,
name JSON NOT NULL,
city INT NOT NULL,
latitude TINYINT(1) DEFAULT NULL,
longitude TINYINT(1) DEFAULT NULL,
diag TINYINT(1) DEFAULT NULL,
c_status TINYINT unsigned DEFAULT 4,
c_owner TINYINT unsigned NOT NULL DEFAULT 1,
c_group TINYINT(2) signed NOT NULL DEFAULT 1,
c_permis INT unsigned DEFAULT 473,
FOREIGN KEY (city) REFERENCES city(id) ON DELETE CASCADE ON UPDATE CASCADE
);

FOREIGN KEY (zone) REFERENCES city(zone) ON DELETE CASCADE ON UPDATE CASCADE

INSERT INTO street (name,city) VALUES
('{"bg": "Хад. Димитър Асенов", "en": "Hadzhi Dimitar Asenov", "es": "Hadzhi Dimitar Asenov"}',3),
('{"bg": "Боруйград", "en": "Boruygrad", "es": "Boruygrad"}',3),
('{"bg": "Железни врата", "en": "Zhelezni vrata", "es": "Zhelezni vrata"}',3),
('{"bg": "Сава Силов", "en": "Sava Silov", "es": "Sava Silov"}',3),
('{"bg": "Розова долина", "en": "Rozova dolina", "es": "Rozova dolina"}',5);

('{"bg":"Цветна градина", "en": "Tsvetna gradina", "es": "Tsvetna gradina"}',1)

# Zone CODE = city.code-unique.code

CREATE TABLE zone (
id INT AUTO_INCREMENT NOT NULL UNIQUE PRIMARY KEY,
name JSON,
code VARCHAR(8) NOT NULL UNIQUE,
city INT NOT NULL,
n INT,
s INT,
e INT,
w INT,
FOREIGN KEY (city) REFERENCES city(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (e) REFERENCES street(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (w) REFERENCES street(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (n) REFERENCES street(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (s) REFERENCES street(id) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO zone ........
('{"en": "Samara I","bg":"Самара 1","es":"Samara I"}','6000-1',14,11,23),
('{"en": "Samara II","bg":"Самара 2","es":"Samara II"}','6000-2',14,11,29),
('{"en": "Samara III","bg":"Самара 3","es":"Samara III"}','6000-3',14,28,30)
('{"en": "Zora","bg":"Зора","es":"Zora"}','6000-4',14)
('{"en": "DZU","bg":"ДЗУ","es":"DZU"}','6000-5',14,11,10),
('{"en": "Opalchensky","bg":"Опълченски","es":"Opalchensky"}','6000-6',14,10),
('{"en": "Orbita","bg":"Орбита","es":"Orbita"}','6000-7',14,28,12,1,29)
;


# location.UID: UNIQUE ID for representative to use in sales
# location.TYPE: (lab,fac,pod,pos,dlvr,basic)
# location.REP: user.uid - representative or NULL = no representative
# location.NUMBER: the building

CREATE TABLE location (
id INT AUTO_INCREMENT NOT NULL UNIQUE PRIMARY KEY,
uid VARCHAR(12) UNIQUE NOT NULL,
rep INT DEFAULT NULL,
city INT,
street_id INT,
number INT,
lat DECIMAL(9,6),
lng DECIMAL(9,6),
type TINYINT DEFAULT 32,
c_status TINYINT unsigned DEFAULT 4,
c_owner TINYINT unsigned NOT NULL DEFAULT 1,
c_group TINYINT unsigned NOT NULL DEFAULT 1,
c_permis INT unsigned DEFAULT 473,
FOREIGN KEY (city) REFERENCES city(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (street_id) REFERENCES street(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (rep) REFERENCES user(uid) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO location (uid,city,street_id,number,rep) VALUES (1,1,1,31,1);

SELECT u_l.phone,s.name,u_l.bell,l.street_id
FROM user_location u_l
INNER JOIN location l
INNER JOIN street s
WHERE u_l.location=13
AND l.id=u_l.location
AND s.id=l.street_id;

SELECT u_l.phone,s.name,u_l.bell,l.uid
FROM user_location u_l
INNER join location l
INNER JOIN street s
WHERE u_l.location=3
AND l.id=u_l.location
AND s.id=l.street_id;

# ---------------------------------------------------------
# === USERS ===============================================
# ------------------- 1 - 2 -- 4 -- 8 - 16 - 32 - 64 - 128 -- 256
# user.membership = [root,lab,fac,baker,pos,dlv,tester,rep,customer]
# user.orders = orders counter

CREATE TABLE user (
uid INT AUTO_INCREMENT NOT NULL UNIQUE PRIMARY KEY,
email VARCHAR(40) NOT NULL UNIQUE,
password VARCHAR(60) NOT NULL UNIQUE,
verified TINYINT(1) unsigned DEFAULT 0,
token VARCHAR(255),
status TINYINT unsigned DEFAULT 1,
membership INT unsigned NOT NULL DEFAULT 64,
username VARCHAR(20),
userlast VARCHAR(20),
bday DATE,
gender TINYINT(1) unsigned,
language TINYINT unsigned,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
lastlog DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
credit INT unsigned DEFAULT 10,
rating TINYINT unsigned,
fb_id INT unsigned,
crowdfund_id INT unsigned,
c_status TINYINT unsigned DEFAULT 4,
c_owner TINYINT unsigned NOT NULL DEFAULT 1,
c_group TINYINT(2) unsigned NOT NULL DEFAULT 1,
c_permis INT unsigned DEFAULT 500
);

UPDATE user set membership=1 WHERE uid=1;


# LABLE=(home,office,home2...)
# ADMIN=TRUE/FALSE(Representative or Not)
# REF=TRUE/FALSE (true) if referenced to REP (attach orders to REP-user.id on each order)

CREATE TABLE user_location (
id INT PRIMARY KEY UNIQUE AUTO_INCREMENT NOT NULL,
uid INT NOT NULL,
admin TINYINT(1) DEFAULT 0,
entry VARCHAR(6),
floor INT unsigned,
door INT unsigned,
bell TEXT,
phone INT,
mobile INT NOT NULL,
location INT NOT NULL,
name TEXT,
prime TINYINT(1) DEFAULT 0,
c_status TINYINT unsigned DEFAULT 4,
c_owner TINYINT unsigned NOT NULL DEFAULT 1,
c_group TINYINT(2) unsigned NOT NULL DEFAULT 1,
c_permis INT unsigned DEFAULT 500,
UNIQUE KEY (uid,location),
FOREIGN KEY (uid) REFERENCES user(uid) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (location) REFERENCES location(id) ON DELETE CASCADE ON UPDATE CASCADE
);

--------------------------------------------------------------------------
# ==== FACS/LABS =========================================================
# LABs:
# lab.status = ['authorized','licensed','active','inactive','canceled','pending']

CREATE TABLE lab (
id INT PRIMARY KEY UNIQUE NOT NULL AUTO_INCREMENT,
uid INT NOT NULL DEFAULT 1,
bulstat INT,
city INT NOT NULL,
name TEXT,
mobile INT NOT NULL,
status INT NOT NULL DEFAULT 33,
open TINYINT(1) DEFAULT 1,
rating INT DEFAULT 0,
c_status TINYINT unsigned DEFAULT 4,
c_owner TINYINT unsigned NOT NULL DEFAULT 2,
c_group TINYINT(2) signed NOT NULL DEFAULT 4,
c_permis INT unsigned NOT NULL DEFAULT 464,
FOREIGN KEY (uid) REFERENCES user(uid) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (city) REFERENCES city(id) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO lab (city,name,mobile,status) VALUES (1,'FirstLab',877323598,7);

# FAC is a USER of GROUP 4 (they can buy components)
# FAC belongs to LAB
# fac.status = ['authorized','licensed','active','inactive','canceled','pending']
# fac.checkin = FAC is set to open (baker is in)
# fac.open = FAC is public
# fac.delivery = [all,to-door,to-take]
# fac.pod = FAC is PoD=true or PoD is apart=false

CREATE TABLE fac (
id INT PRIMARY KEY UNIQUE NOT NULL AUTO_INCREMENT,
uid INT NOT NULL DEFAULT 1,
bulstat INT,
city INT NOT NULL,
prime TINYINT(1) NOT NULL DEFAULT 0,
lab INT NOT NULL,
name TEXT,
delivery TINYINT(2) DEFAULT 4,
mobile INT NOT NULL,
location_id INT NOT NULL,
pod INT DEFAULT 0,
status INT NOT NULL DEFAULT 33,
open TINYINT(1),
checkin TINYINT(1) DEFAULT 0,
bottleneck INT DEFAULT 5,
work_open TIME DEFAULT '11:0:0',
work_close TIME DEFAULT '23:0:0',
sat_open TIME DEFAULT '11:0:0',
sat_close TIME DEFAULT '23:0:0',
sun_open TIME DEFAULT '11:0:0',
sun_close TIME DEFAULT '23:0:0',
vacation_start DATE DEFAULT NULL,
vacation_end DATE DEFAULT NULL,
rating INT DEFAULT 0,
c_status TINYINT unsigned DEFAULT 4,
c_owner TINYINT unsigned NOT NULL DEFAULT 2,
c_group TINYINT(2) unsigned NOT NULL DEFAULT 4,
c_permis INT unsigned NOT NULL DEFAULT 464,
FOREIGN KEY (uid) REFERENCES user(uid) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (lab) REFERENCES lab(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (pod) REFERENCES pod(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (location_id) REFERENCES location(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (city) REFERENCES city(id) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO fac (name,bulstat,open,status,mobile,city,delivery,lab)
VALUES ('FACtory',205873583,1,7,888378946,5,0,1);

464 = 111 010 000

==================================
= NO NEED OF NEXT TABLE          =
==================================
# RELATE FAC and Locations

# CREATE TABLE fac_location (
# id INT PRIMARY KEY UNIQUE NOT NULL AUTO_INCREMENT,
# city INT NOT NULL,
# fac INT NOT NULL,
# prime TINYINT(1) NOT NULL DEFAULT 0,
# FOREIGN KEY (city) REFERENCES city(id) ON DELETE CASCADE ON UPDATE CASCADE,
# FOREIGN KEY (fac) REFERENCES fac(id) ON DELETE CASCADE ON UPDATE CASCADE
# );
#
# INSERT INTO fac_location (city,fac,prime) VALUES
# (12,2,1);

// == STATUSES: ================
['authorized','licensed','active','inactive','canceled','pending']
1,2,4,8,16,32

--------------------------------------------------------------------------
# Point Of Sale: a retailer -> relates to up to FAC
# LOCATION belongs to up to 3 FACs by manual ADMIN SETUP
# ONE FAC is PRIMARY to LOCATION
# If PRIMARY FAC INACTIVE next ACTIVE FAC takes LOCATION

CREATE TABLE pos (
id INT PRIMARY KEY UNIQUE NOT NULL AUTO_INCREMENT,
user_id INT NOT NULL,
bulstat INT,
prime TINYINT(1) DEFAULT 0,
retail_price DECIMAL(4,2) DEFAULT 0,
location INT NOT NULL,
c_status TINYINT unsigned DEFAULT 4,
c_owner TINYINT unsigned NOT NULL DEFAULT 2,
c_group TINYINT(2) unsigned NOT NULL DEFAULT 4,
c_permis INT unsigned DEFAULT 437,
FOREIGN KEY (user_id) REFERENCES user(uid) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (location) REFERENCES location(id) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO pos (fac,location,prime) VALUES (1,2,1),
(1,3,1),
(1,5,1),
(1,4,1),
(1,6,1),
(1,7,1),
(1,8,1),
(1,9,1),
(1,10,1),
(1,11,1),
(1,12,1),
(1,13,1),
(1,14,1);

CREATE TABLE pod (
id INT PRIMARY KEY UNIQUE NOT NULL AUTO_INCREMENT,
user_id INT NOT NULL,
prime TINYINT(1) DEFAULT 0,
retail_price DECIMAL(4,2) DEFAULT 0,
location INT NOT NULL,
work_open TIME DEFAULT '11:0:0',
work_close TIME DEFAULT '23:0:0',
sat_open TIME DEFAULT '11:0:0',
sat_close TIME DEFAULT '23:0:0',
sun_open TIME DEFAULT '11:0:0',
sun_close TIME DEFAULT '23:0:0',
vacation_start DATE DEFAULT NULL,
vacation_end DATE DEFAULT NULL,
rating INT DEFAULT 0,
status INT(1) DEFAULT 1,
c_status TINYINT unsigned DEFAULT 4,
c_owner TINYINT unsigned NOT NULL DEFAULT 2,
c_group TINYINT(2) unsigned NOT NULL DEFAULT 4,
c_permis INT unsigned DEFAULT 437,
FOREIGN KEY (user_id) REFERENCES user(uid) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (location) REFERENCES location(id) ON DELETE CASCADE ON UPDATE CASCADE
);
INSERT INTO pod (user_id,location,prime) VALUES (1,3,1);

select fl.fac,fl.location,fl.prime,f.open,s.product,s.local_promo,s.local_price,s.on_hand
from fac_location fl
join store s on fl.fac=s.fac
join fac f on fl.fac=f.id
where fl.location in (4)

# --------------------------------------------------------------------------
# ---- - Product - Promo - -------------------------------------------------

# ==== PRODUCTS : belong to OWNER/LAB ======================================
# ==== ITEMS : belong to FAB.STORE =========================================

# product.SUPPLIER = (lab,fac,other)
# product.ALT = (music,tv,football,politics,...)
# product.TYPE = (commerce,component,row)
# product.CATEGORY = (pizza,p2,soft,alch,sauce,dessert,salad,pasta,other)
# product.KLASS = (basic,premium,roman,new)
# product.COMBO = (true/false) - product is combo related: search in 'combo' table
# product.SIZE = (personal,big,family...)
# product.PROD_TIME = time to produce in minutes

CREATE TABLE product (
id INT PRIMARY KEY UNIQUE NOT NULL AUTO_INCREMENT,
list INT DEFAULT NULL,
name JSON,
alt JSON,
tag JSON,
price DECIMAL(4,2),
promo INT DEFAULT NULL,
descr JSON,
props JSON,
size INT NOT NULL DEFAULT 1,
category INT NOT NULL DEFAULT 1,
type INT DEFAULT 1,
klass INT DEFAULT 1,
prod_time INT DEFAULT 6,
supplier INT DEFAULT 2,
c_status TINYINT unsigned DEFAULT 4,
c_owner INT unsigned NOT NULL DEFAULT 1,
c_group TINYINT(2) signed NOT NULL DEFAULT 2,
c_permis INT unsigned DEFAULT 457,
FOREIGN KEY (promo) REFERENCES promo(id) ON DELETE CASCADE ON UPDATE CASCADE
);

457 = 111 001 001

----------- FROM GOOGLE SQL: --------------------------------------------------

CREATE TABLE `product` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `list` int(11) DEFAULT NULL,
  `name` json DEFAULT NULL,
  `alt` json DEFAULT NULL,
  `tag` json DEFAULT NULL,
  `price` decimal(4,2) DEFAULT NULL,
  `promo` int(11) DEFAULT NULL,
  `descr` json DEFAULT NULL,
  `props` json DEFAULT NULL,
  `size` int(11) NOT NULL DEFAULT '1',
  `category` int(11) NOT NULL DEFAULT '1',
  `type` int(11) DEFAULT '1',
  `klass` int(11) DEFAULT '1',
  `prod_time` int(11) DEFAULT '6',
  `supplier` int(11) DEFAULT '2',
  `c_status` tinyint(3) unsigned DEFAULT '4',
  `c_owner` int(10) unsigned NOT NULL DEFAULT '1',
  `c_group` tinyint(2) NOT NULL DEFAULT '2',
  `c_permis` int(10) unsigned DEFAULT '457',
  PRIMARY KEY (`id`),

-------------------------------------------------------------------------------

# ==== PROMOs =============================================================
# promo.category = user,product,order,delivery
# promo.scope = global,local
# promo.type = discount, add
# promo.percentage = true/false
# promo.timed = true/false
# promo.period = XX hours

CREATE TABLE promo (
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT UNIQUE,
type TINYINT DEFAULT NULL,
category TINYINT DEFAULT NULL,
scope TINYINT DEFAULT NULL,
name JSON,
timed TINYINT(1) DEFAULT 0,
init_date DATE,
end_date DATE,
period INT DEFAULT 0,
number DECIMAL(4,1) NOT NULL,
percent TINYINT(1) DEFAULT 0,
c_status TINYINT unsigned DEFAULT 2,
c_owner TINYINT unsigned NOT NULL DEFAULT 1,
c_group TINYINT(2) NOT NULL DEFAULT 4,
c_permis INT unsigned DEFAULT 414
);

INSERT INTO promo (scope,category,type,number,name) VALUES (1,2,2,1,'{"bg":"Пица гратис","en":"Free Pizza","es":"Pizza gratis"}');

INSERT INTO combo (price,cat1,cat3) VALUES
(10,1,14);

CREATE TABLE combo (
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT UNIQUE,
klass TINYINT DEFAULT 1,
scope TINYINT DEFAULT 2,
name JSON,
price DECIMAL (4,2) DEFAULT 0,
cat1 INT,
cat2 INT,
cat3 INT,
cat4 INT,
cat5 INT,
cat6 INT,
active TINYINT(1) DEFAULT 0,
c_status TINYINT unsigned DEFAULT 2,
c_owner TINYINT unsigned NOT NULL DEFAULT 1,
c_group TINYINT(2) NOT NULL DEFAULT 4,
c_permis INT unsigned DEFAULT 414,
FOREIGN KEY (cat1) REFERENCES product(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (cat2) REFERENCES product(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (cat3) REFERENCES product(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (cat4) REFERENCES product(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (cat5) REFERENCES product(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (cat6) REFERENCES product(id) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO combo ()

--------------------------------------------------------------------------
# ==== STORE : PRODUCTS LIST per FAC ========================================
# ==== STORE : PRODUCTS LIST per LAB ========================================
# STORE relates FAC/FAB and PRODUCT: list and levels
# STORE belongs to FAC or LAB
# store.on_hand = available quantity
# store.local_price = overrides product.price (under permission)
# store.RELOADED = LAB last reload DATE
# store.ADDONS = additional local products to offer
# store.TAKE_ONLY = product only to takeaway

CREATE TABLE store (
id INT PRIMARY KEY UNIQUE NOT NULL AUTO_INCREMENT,
product INT NOT NULL,
fac INT NOT NULL,
lab INT DEFAULT NULL,
local_price DECIMAL(4,2) DEFAULT NULL,
on_hand INT,
reloaded TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
local_promo INT,
combo INT DEFAULT NULL,
addons INT(1) DEFAULT 0,
take_only INT(1) DEFAULT 0,
c_status TINYINT unsigned DEFAULT 4,
c_owner TINYINT unsigned NOT NULL DEFAULT 1,
c_group TINYINT(2) signed NOT NULL DEFAULT 4,
c_permis INT unsigned DEFAULT 457,
UNIQUE KEY(fac,product),
FOREIGN KEY (fac) REFERENCES fac(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (lab) REFERENCES lab(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (product) REFERENCES product(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (local_promo) REFERENCES promo(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (combo) REFERENCES combo(id) ON DELETE CASCADE ON UPDATE CASCADE
);

------------------- FROM GOOGLE SQL: --------------------------------------------
CREATE TABLE `store` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `product` int(11) NOT NULL,
  `fac` int(11) NOT NULL,
  `lab` int(11) DEFAULT NULL,
  `local_price` decimal(4,2) DEFAULT NULL,
  `on_hand` int(11) DEFAULT NULL,
  `reloaded` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `local_promo` int(11) DEFAULT NULL,
  `addons` int(1) DEFAULT '0',
  `delivery` int(11) DEFAULT '0',
  `take_only` int(1) DEFAULT '0',
  `c_status` tinyint(3) unsigned DEFAULT '4',
  `c_owner` tinyint(3) unsigned NOT NULL DEFAULT '1',
  `c_group` tinyint(2) NOT NULL DEFAULT '4',
  `c_permis` int(10) unsigned DEFAULT '457',
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`),
  UNIQUE KEY `fac` (`fac`,`product`),
  KEY `lab` (`lab`),
  KEY `product` (`product`),
  KEY `local_promo` (`local_promo`),
  CONSTRAINT `store_ibfk_1` FOREIGN KEY (`fac`) REFERENCES `fac` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `store_ibfk_2` FOREIGN KEY (`lab`) REFERENCES `lab` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `store_ibfk_3` FOREIGN KEY (`product`) REFERENCES `product` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `store_ibfk_4` FOREIGN KEY (`local_promo`) REFERENCES `promo` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8 |

------------------------------------------------------------------------------

INSERT INTO store (fac,product,on_hand) VALUES
(2,1,5),
(2,2,8);

INSERT INTO store (fac,product,on_hand) VALUES
(3,9,4),
(3,10,6);

INSERT INTO store (fac,product,on_hand) VALUES
(3,14,14),
(3,15,16),
(3,16,10),
(3,17,10),
(3,18,12)
;

INSERT INTO store (fac,product,on_hand) VALUES
(3,21,14),
(3,22,16)
;

select p.name,p.id,p.price,s.product,s.on_hand,p.promo,s.local_promo from store s inner join product p where s.product=p.id and p.c_status=4;

457 = 111 001 001

CREATE TABLE addons (
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT UNIQUE,
category INT NOT NULL,
name JSON,
descr JSON,
cat_related INT NOT NULL DEFAULT 1,
);

# ---------------- 1 --- 2 ------- 4 ---- 8 --- 16 ----- 32 ----- 64 --- 128 -- 256 -- 512
# order.STATUS = enter,recieve,inprocess,exit,transit,delivered,delayed,missing,reject,cancel
# order.USER_LOCATION = id of user_location -> get location id for delivery-app view
# order.ADD_TIME = pizza.ADD_TIME average
# order.DELIVERY = true/false

CREATE TABLE orders (
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT UNIQUE,
uid INT NOT NULL,
delivery TINYINT(1) DEFAULT 0,
user_location INT DEFAULT NULL,
fac_id INT NOT NULL,
ordered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
ready_at TIME DEFAULT NULL,
delivered_at TIME DEFAULT NULL,
add_time INT DEFAULT 0,
pick_up_time TIME DEFAULT NULL,
promo_id INT,
combo_id INT,
status INT DEFAULT 1,
total DECIMAL(4,2),
total_paid DECIMAL(4,2),
paid TINYINT(1) DEFAULT 0,
c_status TINYINT unsigned DEFAULT 4,
c_owner TINYINT unsigned NOT NULL DEFAULT 1,
c_group TINYINT(2) signed NOT NULL DEFAULT 4,
c_permis INT unsigned DEFAULT 439,
FOREIGN KEY (uid) REFERENCES user(uid) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (user_location) REFERENCES user_location(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (fac_id) REFERENCES fac(id) ON DELETE NO ACTION ON UPDATE CASCADE,
FOREIGN KEY (promo_id) REFERENCES promo(id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (combo_id) REFERENCES combo(id) ON DELETE CASCADE ON UPDATE CASCADE
);

## INSERT INTO orders (uid,pick_up_time,pick_up,user_location,fac_id,total) VALUES (30,timestamp('2019-07-26 19:05:00'),1,38,1,10.20);
INSERT INTO orders (uid,pick_up_time,pick_up,user_location,fac_id,total) VALUES (30,'19:5:0',1,38,1,10.20);


# order_detail.status = waiting,inprocess,delivered,delayed

CREATE TABLE order_detail (
id INT PRIMARY KEY NOT NULL UNIQUE AUTO_INCREMENT,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
delay DATETIME DEFAULT NULL,
item INT NOT NULL,
options JSON,
promo_id INT,
quant INT NOT NULL,
order_id INT NOT NULL,
c_status TINYINT unsigned DEFAULT 4,
c_owner TINYINT unsigned NOT NULL DEFAULT 1,
c_group TINYINT(2) signed NOT NULL DEFAULT 4,
c_permis INT unsigned DEFAULT 439,
FOREIGN KEY (item) REFERENCES product(id),
FOREIGN KEY (order_id) REFERENCES orders(id),
FOREIGN KEY (promo_id) REFERENCES promo(id) ON DELETE CASCADE ON UPDATE CASCADE
);

?? price_unit DECIMAL(4,2),
?? subtotal DECIMAL(4,2),

// === HARDCODED ====================================================
// === ARRAYS    ============

// == ROLES: ================
role = ['owner','group','other']

// == GROUPS: ================
groups/membership = ['root','lab','fac','pos','rep','dlvr','user']
= [1,2,4,8,16,32,64]

// == SOCIAL: ================
actions = ['like','dislike','rate','eat','interested','view']

// == PRIVILEGES: ===========
permiss = [
'owner_delete', 'owner_write', 'owner_read',
'group_delete', 'group_write', 'group_read',
'other_delete', 'other_write', 'other_read'
]

// == STATUS: ================
user_status = ['signed','verified','inactive','pending']
c_status = ['deleted','inactive','active','canceled','pending']
fac_status = ['authorized','licensed','active','inactive','canceled','pending']
lab_status = ['authorized','licensed','active','inactive','canceled','pending']

// == ITEMS TYPES: ================
types = ['pub','part','raw','ingredient']
