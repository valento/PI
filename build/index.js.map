{"version":3,"sources":["../server/index.js"],"names":["dotenv","config","silent","app","PORT","process","env","ENV","NODE_ENV","CURRENT_CITY","SINGLE_CITY","WS","require","server","WSR","router","mediator","EventEmitter","on","console","log","use","express","static","path","join","__dirname","authRouter","userRouter","req","res","next","adminRouter","productRouter","orderRouter","get","getLan","data","params","c_status","lan","city","Number","api","getList","then","cty","response","map","title","JSON","parse","entry","name","id","alt","NULL","cities","mob","match","banner","BANNER","status","json","catch","message","err","sendFile","send","listen","options","key","fs","readFileSync","cert","uconn","rconn","dconn","pconn","bconn","fconn","lconn","rootconn","roles","wsServer","httpServer","wsrouter","attachServer","mount","request","connection","sendUTF","accept","origin","resourceURL","query","ID","msg","utf8Data","user","fac","role","length","baker","find","c","push","order","bkr","forEach","reasonCode","description","indexOf","splice","tester","tconn","Date","conn","reason","dsc"],"mappings":"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","file":"index.js","sourcesContent":["import express from 'express'\nimport spdy from 'spdy'\nimport path from 'path'\nimport fs from 'fs'\nimport jwt from 'jsonwebtoken'\nimport dotenv from 'dotenv'\nimport requestLanguage from 'express-request-language'\nimport authRouter from './routes/auth'\nimport userRouter from './routes/user'\nimport adminRouter from './routes/admin'\nimport productRouter from './routes/product'\nimport orderRouter from './routes/order'\nimport api from './api/'\nimport { getLan,orderListener,adminRouterHit } from './middleware/'\nimport { EventEmitter } from 'events'\n\ndotenv.config({silent: true})\nlet app = express()\nlet PORT = process.env.PORT || 8080\nlet ENV = process.env.NODE_ENV || 'development'\nlet CURRENT_CITY = process.env.SINGLE_CITY > 0 ? process.env.SINGLE_CITY : 0\n\n// Initiate WEB SOCKET:\nlet WS = require('websocket').server\nlet WSR = require('websocket').router\n\n// Instantiate EVENT EMITTER:\nconst mediator = new EventEmitter()\nmediator.on('baker.login', () => {\n  console.log('Baker Here!')\n})\n\napp.use('/static', express.static(path.join(__dirname, '../client/build/static')) )\napp.use('/img', express.static(path.join(__dirname, '../client/build/img')) )\nif(ENV === 'production') app.use(express.static(path.join(__dirname, '../client/build')) )\n\n// == ROUTES & ROUTERS =====================================\napp.use('/auth', authRouter)\napp.use('/user', userRouter)\napp.use('/admin', (req,res,next) => {\n  req.mediator = mediator\n  next()\n}, adminRouter)\napp.use('/products', productRouter)\napp.use('/orders', orderRouter)\n\n// ========================================================\n\napp.get('/ui', getLan, (req,res,next) => {\n  let data = {}\n  let params = {\n    c_status: 4\n  }\n  const { lan } = req\n// SWITCH to:    req.language// === 'en' ? 'bg' : req.language\n  //if(lng === 'lan') {\n  //  data.lan = req.language==='es'? 'es' : 'bg'\n  //} else {\n  data.lan = lan\n  if(!!CURRENT_CITY) data.city = Number(CURRENT_CITY)\n  //}\n// get cities: ? add params {c_status: 4} if needed\n  api.getList('city',['name','id','zone','code','alt'],params).then( response => {//,{c_status: 4}\n    const cty = response.map( entry => {\n//switch BG to req.language in production\n      return {\n        title: JSON.parse(entry.name)[data.lan],\n        id: entry.id,\n        //status: entry.c_status,\n        alt: entry.alt ? JSON.parse(entry.alt)[data.lan] : NULL\n      }\n    })\n    data.cities = cty\n    data.mob = req.get('user-agent').match((/(Mobile)/g)) ? true : false\n    data.banner = !!(process.env.BANNER == 'true')\n    res.status(200).json(data)\n  })\n  .catch( err => res.status(500).json({message: 'Something went wrong...'}))\n})\n\napp.get('/*', (req,res) => {\n  const {err} = req\n  console.log('Root: ',ENV)\n  if(ENV==='production'){\n    console.log('Running: ',ENV)\n    res.sendFile(path.join(__dirname, '../client/build/index.html'))\n  } else if(!err) {\n    res.send('This is not a Web Page! Check your routes...')\n  } else {\n    res.send(err.message)\n  }\n})\n\nlet server = app.listen(PORT, () => {\n  console.log('Server Running in: ',process.env.PORT)\n})\n\n// TRY HTTP2: no ssl-file\nconst options = {\n  key: fs.readFileSync(__dirname + '/ssl/server.key'),\n  cert:fs.readFileSync(__dirname + '/ssl/server.srt'),\n}\n//let server = spdy.createServer(options,app).listen(PORT, error => {\n//  if(error){\n//    console.log(error)\n//    return process.exit(1)\n//  } else {\n//    console.log('H2 running on: ', PORT)\n//  }\n//})\n\n\n// ==========================================================================\n// ==========================================================================\n// # WebSocket-Node Server #\n// ==========================================================================\n\n// WS Connection Objects List: user,ref,dlv,pos,baker,fac,lab,root\nlet uconn=[], rconn=[], dconn=[], pconn=[], bconn=[], fconn=[], lconn=[], rootconn=[]\n// WS protocols:\nvar roles = ['root','lab','fac','baker','pos','dlv','test','rep','customer']\nlet wsServer = new WS({\n  httpServer: server\n})\nlet wsrouter = new WSR()\nwsrouter.attachServer(wsServer)\n\n// BAKER: =====================================================================\nwsrouter.mount('*','baker-protocol', request => {\n  request.on('requestAccepted', connection => {\n    connection.sendUTF('WS: Baker is listening!')\n  })\n// get WS.Connection\n  let connection = request.accept(request.origin)\n  const { id } = request.resourceURL.query\n  connection.ID = Number(id)\n\n// Event handlers:\n  connection.on('message', msg => {\n    const { user,fac,role } = JSON.parse(msg.utf8Data)\n    console.log('Connected Bakers: ', bconn.length)\n    // bconn.find( c => c.id===fac.id ).sendUTF(`Message from User: ${user}, recieved`)\n    //connection.sendUTF(`Message from Baker: ${user}, recieved`)\n  })\n// Store baker-Connections:\n  let baker = bconn.find( c => c.ID === Number(id) )\n  if( !baker ) bconn.push(connection)\n})\n\n// CUSTOMER: ==================================================================\nwsrouter.mount('*','customer-protocol', request => {\n  request.on('requestAccepted', connection => {\n    connection.sendUTF('Customer accepted!')\n  })\n// get WS.Connection:\n  let connection = request.accept(request.origin)\n  const { id } = request.resourceURL.query\n  connection.ID = Number(id)\n\n// Event handlers:\n  connection.on('message', msg => {\n    const { user,fac,role,order } = JSON.parse(msg.utf8Data)\n    console.log('Message from:', connection.ID)\n    if(order) {\n      // ping 'baker-protocol'\n      let bkr = bconn.find( c => c.ID === fac )\n      if(bkr) bkr.sendUTF(`Order from ${user} to ${fac}`)\n    }\n    uconn.forEach( c => {\n      c.sendUTF(`One more User: ${user}, recieved`)\n    })\n    //connection.sendUTF(`${uconn.length - 1} Messages from User: ${user}, send`)\n\n  })\n\n  connection.on('close', (reasonCode, description) => {\n    let c = uconn.indexOf(connection)\n    connection.sendUTF('Connection closed!', uconn[c].ID)\n    uconn.splice(c,1)\n  })\n\n// Store unique customer-connections:\n  let user = uconn.find( c => c.ID === Number(id) )\n  if( !user ) uconn.push(connection)\n\n})\n\n// TESTER: =====================================================================\n  wsrouter.mount('*','test-protocol', request => {\n    request.on('requestAccepted', connection => {\n      connection.sendUTF('Baker is listening!')\n    })\n  // get WS.Connection\n    let connection = request.accept(request.origin)\n    const { id } = request.resourceURL.query\n\n  // Event handlers:\n    connection.ID = Number(id)\n    connection.on('message', msg => {\n      const { user,fac,role } = JSON.parse(msg.utf8Data)\n      console.log('Connected Bakers: ', bconn.length)\n      // bconn.find( c => c.id===fac.id ).sendUTF(`Message from User: ${user}, recieved`)\n      //connection.sendUTF(`Message from Baker: ${user}, recieved`)\n    })\n  // Store baker-Connections:\n    let tester = tconn.find( c => c.ID === Number(id) )\n    if( !tester ) tconn.push(connection)\n  })\n// ======================================================================\n\n\n// WebSocketServer Class:\n//wsServer.on('request', request => {\n//// request is webSocketRequest Object\n//// .accept returns webSocketConnection Instance\n//  let bakerCon = request.accept('baker-protocol', request.origin)\n//\n//})\n\nwsServer.on('connect', socket => {\n  console.log('Connection created at: ', new Date())\n})\n\nwsServer.on('close', (conn, reason, dsc) => {\n  console.log('Connection closed at: ', conn.ID)\n})\n"]}