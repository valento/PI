{"version":3,"sources":["../server/index.js"],"names":["dotenv","config","silent","__options","WS","require","server","WSR","router","ENV","process","env","NODE_ENV","PORT","CURENT_CITY","SINGLE_CITY","start","then","socket","open","catch","console","log","err","mediator","EventEmitter","on","options","key","fs","readFileSync","__dirname","cert"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEAA,iBAAOC,MAAP,CAAc,EAACC,QAAQ,IAAT,EAAd;AACE,IAAIC,YAAY,EAAhB;AACF;AACE,IAAIC,KAAKC,QAAQ,WAAR,EAAqBC,MAA9B;AACA,IAAIC,MAAMF,QAAQ,WAAR,EAAqBG,MAA/B;AACF;AACAL,UAAUM,GAAV,GAAgBC,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,aAAxC;AACAT,UAAUU,IAAV,GAAiBH,QAAQC,GAAR,CAAYC,QAAZ,KAAuB,YAAvB,GAAqCF,QAAQC,GAAR,CAAYE,IAAZ,IAAoB,IAAzD,GAAgE,IAAjF;AACAV,UAAUW,WAAV,GAAwBJ,QAAQC,GAAR,CAAYI,WAAZ,GAA0B,CAA1B,GAA8BL,QAAQC,GAAR,CAAYI,WAA1C,GAAwD,CAAhF;;AAEAT,iBAAOU,KAAP,CAAab,SAAb,EACCc,IADD,CACO,kBAAU;AACjB;AACEC,mBAAOC,IAAP,CAAYb,MAAZ;AACD,CAJD,EAKCc,KALD,CAKQ;AAAA,SAAOC,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,CALR;;AAQA;AACA,IAAMC,WAAW,IAAIC,oBAAJ,EAAjB;AACAD,SAASE,EAAT,CAAY,aAAZ,EAA2B,YAAM;AAC/BL,UAAQC,GAAR,CAAY,aAAZ;AACD,CAFD;;AAMA,IAAMK,UAAU;AACZC,OAAKC,aAAGC,YAAH,CAAgBC,YAAY,iBAA5B,EAA+C,MAA/C,CADO;AAEZC,QAAKH,aAAGC,YAAH,CAAgBC,YAAY,iBAA5B,EAA+C,MAA/C;;AAGT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACF;;AArBgB,CAAhB","file":"index.js","sourcesContent":["import server from './server'\nimport socket from './socket'\nimport dotenv from 'dotenv'\nimport https from 'https'\nimport spdy from 'spdy'\nimport path from 'path'\nimport fs from 'fs'\nimport { EventEmitter } from 'events'\n\ndotenv.config({silent: true})\n  var __options = {}\n// Initiate WEB SOCKET:\n  var WS = require('websocket').server\n  var WSR = require('websocket').router\n//let app = express(), server\n__options.ENV = process.env.NODE_ENV || 'development'\n__options.PORT = process.env.NODE_ENV==='production'? process.env.PORT || 8080 : 8080\n__options.CURENT_CITY = process.env.SINGLE_CITY > 0 ? process.env.SINGLE_CITY : 0\n\nserver.start(__options)\n.then( server => {\n// # WebSocket-Node Server #\n  socket.open(server)\n})\n.catch( err => console.log(err) )\n\n\n// Instantiate EVENT EMITTER:\nconst mediator = new EventEmitter()\nmediator.on('baker.login', () => {\n  console.log('Baker Here!')\n})\n\n\n\nconst options = {\n    key: fs.readFileSync(__dirname + '/ssl/server.key', 'utf8'),\n    cert:fs.readFileSync(__dirname + '/ssl/server.srt', 'utf8')\n  }\n\n//if(ENV==='production') {\n//// TRY HTTP2: no ssl-file\n//  const options = {\n//    key: fs.readFileSync(__dirname + '/ssl/server.key', 'utf8'),\n//    cert:fs.readFileSync(__dirname + '/ssl/server.srt', 'utf8')\n//  }\n//  server = https.createServer(options,app).listen(PORT, error => {\n//    if(error){\n//      console.log(error)\n//      return process.exit(1)\n//    } else {\n//      console.log('HTTPS running on: ', PORT)\n//    }\n//  })\n//} else {\n  // server = app.listen(PORT, () => console.log('Server Running on: ',PORT) )\n//}\n"]}