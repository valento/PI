{"version":3,"sources":["../server/index.js"],"names":["dotenv","config","silent","app","PORT","process","env","ENV","NODE_ENV","CURRENT_CITY","SINGLE_CITY","WS","require","server","use","express","static","path","join","__dirname","authRouter","userRouter","adminRouter","productRouter","orderRouter","get","getLan","req","res","next","data","params","c_status","lan","city","Number","api","getList","then","cty","response","map","title","JSON","parse","entry","name","id","alt","NULL","cities","mob","match","banner","BANNER","status","json","catch","message","err","console","log","sendFile","send","listen","options","key","fs","readFileSync","cert","wss","httpServer","on","connection","request","accept","origin","Date"],"mappings":"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","file":"index.js","sourcesContent":["import express from 'express'\nimport spdy from 'spdy'\nimport path from 'path'\nimport fs from 'fs'\nimport jwt from 'jsonwebtoken'\nimport dotenv from 'dotenv'\nimport requestLanguage from 'express-request-language'\nimport authRouter from './routes/auth'\nimport userRouter from './routes/user'\nimport adminRouter from './routes/admin'\nimport productRouter from './routes/product'\nimport orderRouter from './routes/order'\nimport api from './api/'\nimport { getLan } from './middleware/'\n\ndotenv.config({silent: true})\nlet app = express()\nlet PORT = process.env.PORT || 8080\nlet ENV = process.env.NODE_ENV || 'development'\nlet CURRENT_CITY = process.env.SINGLE_CITY > 0 ? process.env.SINGLE_CITY : 0\n\nlet WS = require('websocket').server\n\napp.use('/static', express.static(path.join(__dirname, '../client/build/static')) )\napp.use('/img', express.static(path.join(__dirname, '../client/build/img')) )\nif(ENV === 'production') app.use(express.static(path.join(__dirname, '../client/build')) )\n\n// == ROUTES ==============================================\napp.use('/auth', authRouter)\napp.use('/user', userRouter)\napp.use('/admin', adminRouter)\napp.use('/products',productRouter)\napp.use('/orders',orderRouter)\n\n// ========================================================\n\napp.get('/ui', getLan, (req,res,next) => {\n  let data = {}\n  let params = {\n    c_status: 4\n  }\n  const { lan } = req\n// SWITCH to:    req.language// === 'en' ? 'bg' : req.language\n  //if(lng === 'lan') {\n  //  data.lan = req.language==='es'? 'es' : 'bg'\n  //} else {\n  data.lan = lan\n  if(!!CURRENT_CITY) data.city = Number(CURRENT_CITY)\n  //}\n// get cities: ? add params {c_status: 4} if needed\n  api.getList('city',['name','id','zone','code','alt'],params).then( response => {//,{c_status: 4}\n    const cty = response.map( entry => {\n//switch BG to req.language in production\n      return {\n        title: JSON.parse(entry.name)[data.lan],\n        id: entry.id,\n        //status: entry.c_status,\n        alt: entry.alt ? JSON.parse(entry.alt)[data.lan] : NULL\n      }\n    })\n    data.cities = cty\n    data.mob = req.get('user-agent').match((/(Mobile)/g)) ? true : false\n    data.banner = !!(process.env.BANNER == 'true')\n    res.status(200).json(data)\n  })\n  .catch( err => res.status(500).json({message: 'Something went wrong...'}))\n})\n\napp.get('/*', (req,res) => {\n  const {err} = req\n  console.log('Root: ',ENV)\n  if(ENV==='production'){\n    console.log('Running: ',ENV)\n    res.sendFile(path.join(__dirname, '../client/build/index.html'))\n  } else if(!err) {\n    res.send('This is not a Web Page! Check your routes...')\n  } else {\n    res.send(err.message)\n  }\n})\n\nlet server = app.listen(PORT, () => {\n  console.log('Server Running in: ',process.env.PORT)\n})\n\n// TRY HTTP2: no ssl-file\nconst options = {\n  key: fs.readFileSync(__dirname + '/ssl/server.key'),\n  cert:fs.readFileSync(__dirname + '/ssl/server.srt'),\n}\n//let server = spdy.createServer(options,app).listen(PORT, error => {\n//  if(error){\n//    console.log(error)\n//    return process.exit(1)\n//  } else {\n//    console.log('H2 running on: ', PORT)\n//  }\n//})\n\n// # WebSocket-Node Server #\nlet wss = new WS({\n  httpServer: server\n})\n// WebSocketServer Class:\nwss.on('request', request => {\n// request is webSocketRequest Object\n// .accept returns webSocketConnection Instance\n  let connection = request.accept('echo-protocol', request.origin)\n\n  connection.on('message', message => {\n    console.log('Socket: ',request.origin, message)\n  })\n})\n\nwss.on('connect', socket => {\n  console.log('Connection created at: ', new Date())\n})\n"]}