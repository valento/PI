{"version":3,"sources":["../server/socket.js"],"names":["WS","require","server","WSR","router","conn","root","lab","fac","baker","pos","dlv","test","rep","customer","roles","open","member","rnd","Math","floor","random","wsServer","httpServer","keepalive","wsrouter","attachServer","forEach","role","index","mount","request","on","connection","protocol","length","c","send","JSON","stringify","customer_counter","b","map","cst","FAC","accept","origin","resourceURL","query","id","ID","Number","con","find","push","parse","msg","utf8Data","user","mem","ordered","console","log","bkr","order","undefined","filter","reasonCode","description","local_customers","all_customers","i","findIndex","splice","Date","reason","dsc","Object","assign"],"mappings":"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","file":"socket.js","sourcesContent":["// Initiate WEB SOCKET:\r\n  var WS = require('websocket').server\r\n  var WSR = require('websocket').router\r\n\r\n// WS Connection Objects List: user,ref,dlv,pos,baker,fac,lab,root\r\n  let conn = { root: [], lab: [], fac: [], baker: [], pos: [], dlv: [],\r\n    test: [], rep: [], customer: [] }\r\n// WS protocols:\r\n  var roles = ['root','lab','fac','baker','pos','dlv','test','rep','customer']\r\n\r\n\r\n\r\nconst open = (server,member) => {\r\n  let rnd = Math.floor(Math.random()*Math.floor(6))\r\n  const wsServer = new WS({\r\n    httpServer: server,\r\n    keepalive: true\r\n  })\r\n\r\n  const wsrouter = new WSR()\r\n  wsrouter.attachServer(wsServer)\r\n\r\n  roles.forEach( (role,index) => {\r\n    wsrouter.mount('*',`${role}-protocol`, request => {\r\n// Count Inital User array on Hand-shake:\r\n      request.on('requestAccepted', connection => {\r\n        if(connection.protocol === 'customer-protocol') {\r\n          if(conn.customer.length > 0) {\r\n             conn.customer.forEach( c => c.send(JSON.stringify({\r\n               customer_counter: conn.customer.length+rnd\r\n             })))\r\n          }\r\n          if(conn.baker.length > 0) {\r\n            conn.baker.forEach( b => b.send(JSON.stringify({\r\n              customer_counter: conn.customer.map(cst => cst.FAC)\r\n            })))\r\n          }\r\n        } else if (connection.protocol === 'baker-protocol'){\r\n          connection.send(JSON.stringify({\r\n            customer_counter: conn.customer.map(cst => cst.FAC)\r\n          }))\r\n        }\r\n      })\r\n  // get WS.Connection\r\n      let connection = request.accept(request.origin)\r\n      const { id,fac } = request.resourceURL.query\r\n      connection.ID = Number(id)\r\n      connection.FAC = Number(fac)\r\n  // Store baker-Connections:\r\n      let con = conn[role].find( c => c.ID === Number(id) )\r\n      if( !con ) conn[role].push(connection)\r\n\r\n  // Event handlers:\r\n  // ------ MESSAGING Event: ------------------------------------\r\n      connection.on('message', msg => {\r\n        const { user,fac,mem,ordered,open } = JSON.parse(msg.utf8Data)\r\n        console.log('Socket Parse: ', user,fac,mem,ordered)\r\n        let bkr = conn.baker.find( c => c.ID === fac )\r\n        let order = !!ordered\r\n        if(bkr && order) {\r\n          bkr.send(JSON.stringify({ user: id, order: order }))\r\n        } else if(open !== undefined) {\r\n          conn.customer.filter( c => c.FAC===fac )\r\n          .forEach( c => c.send(JSON.stringify({ fac:fac, open:open })) )\r\n        }\r\n      //conn[roles[Math.log2(mem)]].find( c => c.ID===user ).sendUTF(`Message from User: ${user}, recieved`)\r\n\r\n      //connection.sendUTF(`Message from Baker: ${user}, recieved`)\r\n      })\r\n  // ------ CLOSE Event: ------------------------------------\r\n      connection.on('close', ( reasonCode, description ) => {\r\n        console.log('Close Customer Connection: ', connection.ID, connection.FAC)\r\n        let { FAC,ID } = connection, local_customers = [], all_customers\r\n        let b = conn.baker.find( b => b.FAC === FAC)\r\n        let i = conn[role].findIndex( c => c.ID === ID )\r\n        conn[role].splice(i,1)\r\n\r\n        if(role === 'customer') {\r\n// Notify Baker counter:\r\n          if(b) {\r\n            local_customers = conn.customer.filter(cst => cst.FAC===FAC)\r\n            //console.log('Local Customers: ', local_customers)\r\n            b.send( JSON.stringify({customer_counter: local_customers.map( c => c.FAC )}) )\r\n          }\r\n// Notify Customer counter:\r\n          conn.customer.forEach( c => c.send(\r\n            JSON.stringify({\r\n              customer_counter: conn.customer.length\r\n          })))\r\n        }\r\n      })\r\n\r\n    })\r\n  })\r\n\r\n\r\n\r\n  wsServer.on('connect', c => {\r\n    console.log('Connection created at: ', new Date())\r\n  })\r\n\r\n  wsServer.on('close', (conn, reason, dsc) => {\r\n    console.log('Connection closed at: ', conn.ID)\r\n  })\r\n\r\n// BAKER: =====================================================================\r\n\r\n\r\n//// CUSTOMER: ==================================================================\r\n//  wsrouter.mount('*','customer-protocol', request => {\r\n//    request.on('requestAccepted', connection => {\r\n//      connection.sendUTF('WS: Customer accepted!')\r\n//    })\r\n//// get WS.Connection:\r\n//    let connection = request.accept(request.origin)\r\n//    const { id } = request.resourceURL.query\r\n//    connection.ID = Number(id)\r\n//\r\n//// Event handlers:\r\n//// ------ MESSAGING Event: ----------------------\r\n//    connection.on('message', msg => {\r\n//      const { user,fac,role,order } = JSON.parse(msg.utf8Data)\r\n//      console.log('Message from customer:', connection.ID)\r\n//      if(order) {\r\n//      // ping 'baker-protocol'\r\n//        let bkr = bconn.find( c => c.ID === fac )\r\n//        if(bkr) bkr.send(JSON.stringify({ user: id, order: true }))\r\n//      }\r\n//      uconn.forEach( c => {\r\n//        c.sendUTF(`One more Customer: ${user}, recieved`)\r\n//      })\r\n//      //connection.sendUTF(`${uconn.length - 1} Messages from User: ${user}, send`)\r\n//\r\n//    })\r\n//// ------ CLOSE Event: ------------------------------------\r\n//    connection.on('close', (reasonCode, description) => {\r\n//      let c = uconn.indexOf(connection)\r\n//      //if(uconn[c].ID) connection.sendUTF('WS: Customer connection closed!', uconn[c].ID)\r\n//      uconn.splice(c,1)\r\n//      console.log('Consumer Sockets: ',uconn.length)\r\n//    })\r\n//\r\n//// Store unique customer-connections:\r\n//    let user = uconn.find( c => c.ID === Number(id) )\r\n//    if( !user ) uconn.push(connection)\r\n//\r\n//  })\r\n//\r\n//// TESTER: =====================================================================\r\n//    wsrouter.mount('*','test-protocol', request => {\r\n//      request.on('requestAccepted', connection => {\r\n//        connection.sendUTF('WS: Tester is listening!')\r\n//      })\r\n//  // get WS.Connection\r\n//      let connection = request.accept(request.origin)\r\n//      const { id } = request.resourceURL.query\r\n//\r\n//  // Event handlers:\r\n//      connection.ID = Number(id)\r\n//      connection.on('message', msg => {\r\n//        const { user,fac,role } = JSON.parse(msg.utf8Data)\r\n//        console.log('WS: Connected Testers: ', tconn.length)\r\n//      // bconn.find( c => c.id===fac.id ).sendUTF(`Message from User: ${user}, recieved`)\r\n//        //connection.sendUTF(`Message from Baker: ${user}, recieved`)\r\n//      })\r\n//  // Store baker-Connections:\r\n//      let tester = tconn.find( c => c.ID === Number(id) )\r\n//      if( !tester ) tconn.push(connection)\r\n//    })\r\n//// ======================================================================\r\n//\r\n//  // WebSocketServer Class:\r\n//  //wsServer.on('request', request => {\r\n//  //// request is webSocketRequest Object\r\n//  //// .accept returns webSocketConnection Instance\r\n//  //  let bakerCon = request.accept('baker-protocol', request.origin)\r\n//  //\r\n//  //})\r\n//\r\n\r\n\r\n}\r\n\r\nexport default Object.assign({},{ open })\r\n"]}