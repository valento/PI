{"version":3,"sources":["../server/socket.js"],"names":["WS","require","server","WSR","router","conn","root","lab","fac","baker","pos","dlv","test","rep","customer","roles","open","member","wsServer","httpServer","autoAcceptConnections","wsrouter","attachServer","forEach","role","index","mount","request","on","console","log","length","connection","accept","origin","id","resourceURL","query","ID","Number","con","find","c","push","JSON","parse","msg","utf8Data","user","mem","ordered","bkr","send","stringify","order","Math","log2","sendUTF","reasonCode","description","indexOf","splice","Date","reason","dsc","Object","assign"],"mappings":"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","file":"socket.js","sourcesContent":["// Initiate WEB SOCKET:\r\n  var WS = require('websocket').server\r\n  var WSR = require('websocket').router\r\n\r\n// WS Connection Objects List: user,ref,dlv,pos,baker,fac,lab,root\r\n  let conn = { root: [], lab: [], fac: [], baker: [], pos: [], dlv: [],\r\n    test: [], rep: [], customer: [] }\r\n// WS protocols:\r\n  var roles = ['root','lab','fac','baker','pos','dlv','test','rep','customer']\r\n\r\n\r\n\r\nconst open = (server,member) => {\r\n\r\n  const wsServer = new WS({\r\n    httpServer: server,\r\n    autoAcceptConnections: false\r\n  })\r\n\r\n  const wsrouter = new WSR()\r\n  wsrouter.attachServer(wsServer)\r\n\r\n  roles.forEach( (role,index) => {\r\n    wsrouter.mount('*',`${role}-protocol`, request => {\r\n\r\n      request.on('requestAccepted', connection => {\r\n        console.log(`WS: ${role} is listening!: ${conn[role].length}`)\r\n      })\r\n  // get WS.Connection\r\n      let connection = request.accept(request.origin)\r\n      const { id } = request.resourceURL.query\r\n      connection.ID = Number(id)\r\n  // Store baker-Connections:\r\n      let con = conn[role].find( c => c.ID === Number(id) )\r\n      if( !con ) conn[role].push(connection)\r\n\r\n  // Event handlers:\r\n  // ------ MESSAGING Event: ------------------------------------\r\n      connection.on('message', msg => {\r\n        const { user,fac,mem,ordered } = JSON.parse(msg.utf8Data)\r\n        console.log('Socket Parse: ', user,fac,mem,ordered)        \r\n        if(ordered) {\r\n  // fire 'baker-protocol'\r\n  // Find active Bakery FAC ID connection:\r\n          let bkr = conn.baker.find( c => c.ID === fac )\r\n          if(bkr) bkr.send(JSON.stringify({ user: id, order: true }))\r\n        } else {\r\n          conn[roles[Math.log2(mem)]].find( c => c.ID===user ).sendUTF(`Message from User: ${user}, recieved`)\r\n        }\r\n        console.log(`Connected ${role}: `, connection.ID)\r\n\r\n      //connection.sendUTF(`Message from Baker: ${user}, recieved`)\r\n      })\r\n  // ------ CLOSE Event: ------------------------------------\r\n      connection.on('close', (reasonCode, description) => {\r\n        let c = conn[role].indexOf(connection)\r\n        conn[role].splice(c,1)\r\n        console.log(`${role} Socket closed: `, c)\r\n      })\r\n\r\n    })\r\n  })\r\n\r\n  wsServer.on('connect', socket => {\r\n    console.log('Connection created at: ', new Date())\r\n  })\r\n\r\n  wsServer.on('close', (conn, reason, dsc) => {\r\n    console.log('Connection closed at: ', conn.ID)\r\n  })\r\n\r\n// BAKER: =====================================================================\r\n\r\n\r\n//// CUSTOMER: ==================================================================\r\n//  wsrouter.mount('*','customer-protocol', request => {\r\n//    request.on('requestAccepted', connection => {\r\n//      connection.sendUTF('WS: Customer accepted!')\r\n//    })\r\n//// get WS.Connection:\r\n//    let connection = request.accept(request.origin)\r\n//    const { id } = request.resourceURL.query\r\n//    connection.ID = Number(id)\r\n//\r\n//// Event handlers:\r\n//// ------ MESSAGING Event: ----------------------\r\n//    connection.on('message', msg => {\r\n//      const { user,fac,role,order } = JSON.parse(msg.utf8Data)\r\n//      console.log('Message from customer:', connection.ID)\r\n//      if(order) {\r\n//      // ping 'baker-protocol'\r\n//        let bkr = bconn.find( c => c.ID === fac )\r\n//        if(bkr) bkr.send(JSON.stringify({ user: id, order: true }))\r\n//      }\r\n//      uconn.forEach( c => {\r\n//        c.sendUTF(`One more Customer: ${user}, recieved`)\r\n//      })\r\n//      //connection.sendUTF(`${uconn.length - 1} Messages from User: ${user}, send`)\r\n//\r\n//    })\r\n//// ------ CLOSE Event: ------------------------------------\r\n//    connection.on('close', (reasonCode, description) => {\r\n//      let c = uconn.indexOf(connection)\r\n//      //if(uconn[c].ID) connection.sendUTF('WS: Customer connection closed!', uconn[c].ID)\r\n//      uconn.splice(c,1)\r\n//      console.log('Consumer Sockets: ',uconn.length)\r\n//    })\r\n//\r\n//// Store unique customer-connections:\r\n//    let user = uconn.find( c => c.ID === Number(id) )\r\n//    if( !user ) uconn.push(connection)\r\n//\r\n//  })\r\n//\r\n//// TESTER: =====================================================================\r\n//    wsrouter.mount('*','test-protocol', request => {\r\n//      request.on('requestAccepted', connection => {\r\n//        connection.sendUTF('WS: Tester is listening!')\r\n//      })\r\n//  // get WS.Connection\r\n//      let connection = request.accept(request.origin)\r\n//      const { id } = request.resourceURL.query\r\n//\r\n//  // Event handlers:\r\n//      connection.ID = Number(id)\r\n//      connection.on('message', msg => {\r\n//        const { user,fac,role } = JSON.parse(msg.utf8Data)\r\n//        console.log('WS: Connected Testers: ', tconn.length)\r\n//      // bconn.find( c => c.id===fac.id ).sendUTF(`Message from User: ${user}, recieved`)\r\n//        //connection.sendUTF(`Message from Baker: ${user}, recieved`)\r\n//      })\r\n//  // Store baker-Connections:\r\n//      let tester = tconn.find( c => c.ID === Number(id) )\r\n//      if( !tester ) tconn.push(connection)\r\n//    })\r\n//// ======================================================================\r\n//\r\n//  // WebSocketServer Class:\r\n//  //wsServer.on('request', request => {\r\n//  //// request is webSocketRequest Object\r\n//  //// .accept returns webSocketConnection Instance\r\n//  //  let bakerCon = request.accept('baker-protocol', request.origin)\r\n//  //\r\n//  //})\r\n//\r\n\r\n\r\n}\r\n\r\nexport default Object.assign({},{ open })\r\n"]}