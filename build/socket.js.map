{"version":3,"sources":["../server/socket.js"],"names":["WS","require","server","WSR","router","conn","root","lab","fac","baker","pos","dlv","test","rep","customer","roles","open","member","rnd","Math","floor","random","console","log","wsServer","httpServer","autoAcceptConnections","wsrouter","attachServer","forEach","role","index","mount","request","on","connection","protocol","length","c","send","JSON","stringify","customer_counter","b","accept","origin","id","resourceURL","query","ID","Number","con","find","push","parse","msg","utf8Data","user","mem","ordered","bkr","order","reasonCode","description","i","splice","Date","reason","dsc","Object","assign"],"mappings":"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","file":"socket.js","sourcesContent":["// Initiate WEB SOCKET:\r\n  var WS = require('websocket').server\r\n  var WSR = require('websocket').router\r\n\r\n// WS Connection Objects List: user,ref,dlv,pos,baker,fac,lab,root\r\n  let conn = { root: [], lab: [], fac: [], baker: [], pos: [], dlv: [],\r\n    test: [], rep: [], customer: [] }\r\n// WS protocols:\r\n  var roles = ['root','lab','fac','baker','pos','dlv','test','rep','customer']\r\n\r\n\r\n\r\nconst open = (server,member) => {\r\n  let rnd = Math.floor(Math.random()*Math.floor(6))\r\nconsole.log('Initial Users: ',rnd)\r\n  const wsServer = new WS({\r\n    httpServer: server,\r\n    autoAcceptConnections: false\r\n  })\r\n\r\n  const wsrouter = new WSR()\r\n  wsrouter.attachServer(wsServer)\r\n\r\n  roles.forEach( (role,index) => {\r\n    wsrouter.mount('*',`${role}-protocol`, request => {\r\n\r\n      request.on('requestAccepted', connection => {\r\n        if(connection.protocol === 'customer-protocol') {\r\n          if(conn.customer.length > 0) {\r\n             conn.customer.forEach( c => c.send(JSON.stringify({customer_counter: conn.customer.length+rnd})))\r\n          }\r\n        } else if (connection.protocol === 'baker-protocol'){\r\n          if(conn[role].length>0) {\r\n            conn.baker.forEach( b => b.send(JSON.stringify({customer_counter: conn.customer.length})))\r\n          }\r\n\r\n        }\r\n      })\r\n  // get WS.Connection\r\n      let connection = request.accept(request.origin)\r\n      const { id } = request.resourceURL.query\r\n      connection.ID = Number(id)\r\n  // Store baker-Connections:\r\n      let con = conn[role].find( c => c.ID === Number(id) )\r\n      if( !con ) conn[role].push(connection)\r\n\r\n  // Event handlers:\r\n  // ------ MESSAGING Event: ------------------------------------\r\n      connection.on('message', msg => {\r\n        const { user,fac,mem,ordered } = JSON.parse(msg.utf8Data)\r\n        console.log('Socket Parse: ', user,fac,mem,ordered)\r\n        let bkr = conn.baker.find( c => c.ID === fac )\r\n        let order = !!ordered\r\n        if(bkr) {\r\n          console.log(`Baker ${bkr.ID}, send`)\r\n          bkr.send(JSON.stringify({ user: id, order: order }))\r\n        }\r\n          //conn[roles[Math.log2(mem)]].find( c => c.ID===user ).sendUTF(`Message from User: ${user}, recieved`)\r\n        console.log(`Connected ${role}: ${user} `)\r\n\r\n      //connection.sendUTF(`Message from Baker: ${user}, recieved`)\r\n      })\r\n  // ------ CLOSE Event: ------------------------------------\r\n      connection.on('close', (reasonCode, description) => {\r\n        let i = conn[role].find(c => c.ID === connection.ID)\r\n        conn[role].splice(i,1)\r\n        if(role === 'customer' && conn.customer.length>0) {\r\n          conn.customer.forEach( c => {\r\n            c.send(JSON.stringify({customer_counter: conn[role].length+rnd}))\r\n          })\r\n        }\r\n      })\r\n\r\n    })\r\n  })\r\n\r\n  wsServer.on('connect', socket => {\r\n    console.log('Connection created at: ', new Date())\r\n  })\r\n\r\n  wsServer.on('close', (conn, reason, dsc) => {\r\n    console.log('Connection closed at: ', conn.ID)\r\n  })\r\n\r\n// BAKER: =====================================================================\r\n\r\n\r\n//// CUSTOMER: ==================================================================\r\n//  wsrouter.mount('*','customer-protocol', request => {\r\n//    request.on('requestAccepted', connection => {\r\n//      connection.sendUTF('WS: Customer accepted!')\r\n//    })\r\n//// get WS.Connection:\r\n//    let connection = request.accept(request.origin)\r\n//    const { id } = request.resourceURL.query\r\n//    connection.ID = Number(id)\r\n//\r\n//// Event handlers:\r\n//// ------ MESSAGING Event: ----------------------\r\n//    connection.on('message', msg => {\r\n//      const { user,fac,role,order } = JSON.parse(msg.utf8Data)\r\n//      console.log('Message from customer:', connection.ID)\r\n//      if(order) {\r\n//      // ping 'baker-protocol'\r\n//        let bkr = bconn.find( c => c.ID === fac )\r\n//        if(bkr) bkr.send(JSON.stringify({ user: id, order: true }))\r\n//      }\r\n//      uconn.forEach( c => {\r\n//        c.sendUTF(`One more Customer: ${user}, recieved`)\r\n//      })\r\n//      //connection.sendUTF(`${uconn.length - 1} Messages from User: ${user}, send`)\r\n//\r\n//    })\r\n//// ------ CLOSE Event: ------------------------------------\r\n//    connection.on('close', (reasonCode, description) => {\r\n//      let c = uconn.indexOf(connection)\r\n//      //if(uconn[c].ID) connection.sendUTF('WS: Customer connection closed!', uconn[c].ID)\r\n//      uconn.splice(c,1)\r\n//      console.log('Consumer Sockets: ',uconn.length)\r\n//    })\r\n//\r\n//// Store unique customer-connections:\r\n//    let user = uconn.find( c => c.ID === Number(id) )\r\n//    if( !user ) uconn.push(connection)\r\n//\r\n//  })\r\n//\r\n//// TESTER: =====================================================================\r\n//    wsrouter.mount('*','test-protocol', request => {\r\n//      request.on('requestAccepted', connection => {\r\n//        connection.sendUTF('WS: Tester is listening!')\r\n//      })\r\n//  // get WS.Connection\r\n//      let connection = request.accept(request.origin)\r\n//      const { id } = request.resourceURL.query\r\n//\r\n//  // Event handlers:\r\n//      connection.ID = Number(id)\r\n//      connection.on('message', msg => {\r\n//        const { user,fac,role } = JSON.parse(msg.utf8Data)\r\n//        console.log('WS: Connected Testers: ', tconn.length)\r\n//      // bconn.find( c => c.id===fac.id ).sendUTF(`Message from User: ${user}, recieved`)\r\n//        //connection.sendUTF(`Message from Baker: ${user}, recieved`)\r\n//      })\r\n//  // Store baker-Connections:\r\n//      let tester = tconn.find( c => c.ID === Number(id) )\r\n//      if( !tester ) tconn.push(connection)\r\n//    })\r\n//// ======================================================================\r\n//\r\n//  // WebSocketServer Class:\r\n//  //wsServer.on('request', request => {\r\n//  //// request is webSocketRequest Object\r\n//  //// .accept returns webSocketConnection Instance\r\n//  //  let bakerCon = request.accept('baker-protocol', request.origin)\r\n//  //\r\n//  //})\r\n//\r\n\r\n\r\n}\r\n\r\nexport default Object.assign({},{ open })\r\n"]}