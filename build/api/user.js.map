{"version":3,"sources":["../../server/api/user.js"],"names":["config","require","dotenv","silent","options","user","get","password","database","process","env","NODE_ENV","socketPath","host","db","mysql","createConnection","signup","sql","email","data","token","_keys","Object","keys","_values","params","values","map","push","v","console","log","Promise","resolve","reject","query","err","result","insertId","checkOne","scope","results","verify","rows","getOne","table","sc","entry","_key","_value","saveOne","updateOne","id","rest","_map","getFac","city"],"mappings":"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","file":"user.js","sourcesContent":["import mysql from 'mysql'\nimport dotenv from 'dotenv'\n\nconst config = require('../../config')\n\ndotenv.config({silent: true})\nconst options = {\n  user: config.get('MYSQL_USER'),\n  password: config.get('MYSQL_PASSWORD'),\n  database: config.get('MYSQL_DB')\n}\n\nif( config.get('INSTANCE_CONNECTION_NAME') && process.env.NODE_ENV === 'production' ) {\n  options.socketPath = `/cloudsql/${config.get('INSTANCE_CONNECTION_NAME')}`\n} else {\n  options.host = 'localhost'\n}\n\nconst db = mysql.createConnection(options)\n\nexport default {\n\n    signup: data => {\n      let sql\n      const { email,password,token } = data\n\n      let _keys = Object.keys(data), _values = []\n      let params = Object.values(data).map( v => {\n        _values.push('?')\n        return v\n      })\n      //const sql = `INSERT INTO user (${_keys}) VALUES (${_values})`\n\n      if(email==='valentin.mundrov@gmail.com'){\n        sql = `INSERT INTO user (email,password,token,membership) VALUES('${email}','${password}','${token}',1)`\n      } else {\n        sql = `INSERT INTO user (${_keys}) VALUES (${_values})`\n        //`INSERT INTO user (email,password,token) VALUES('${email}','${password}','${token}');`\n      }\n      console.log('Auth Insert: ',sql)\n      return new Promise ((resolve,reject) => {\n        db.query(sql, params, (err,result) => {\n          if(err) return reject(err)\n          resolve(result.insertId)\n        })\n      })\n    },\n// chek if user exist\n    checkOne: (email,scope='*') => {\n      const sql = `SELECT ${scope} FROM user WHERE email='${email}' AND c_status=4`\nconsole.log(sql)\n      return new Promise( (resolve, reject) => {\n        db.query(sql, ( err,results ) => {\n          if(err) return reject(err)\n          resolve(results)\nconsole.log('API CheckOne User: ',err)\n        })\n      })\n    },\n\n// check user verified:\n    verify: email => {\n      const sql = `UPDATE user SET verified=1 WHERE email='${email}'`\n      return new Promise( (resolve, reject) => {\n        db.query(sql, ( err,rows ) => {\n          if(err) return reject(err)\n          resolve(rows)\n        })\n      })\n    },\n\n// on User.init: returns user and user's locations\n    getOne: (data={},table,scope=['*']) => {\n      let sql\n      let sc = scope.map( entry => 'u.'+entry)\n      const _key = Object.keys(data)\n      const _value = Object.values(data)\n      if(table==='user'){\n        sql = `SELECT ${sc},\n        ul.id,ul.name,ul.door,ul.floor,ul.bell,ul.admin,ul.mobile,ul.location,ul.c_status,ul.prime,\n        l.city\n        FROM user u\n        LEFT JOIN user_location ul ON u.uid=ul.uid\n        LEFT JOIN location l ON l.id=ul.location\n        WHERE u.email='${data.email}'\n        `\n      } else {\n        sql = `SELECT ${scope} FROM ${table} WHERE ${_key}='${_value}'`\n      }\n      return new Promise( (resolve,reject) => {\n        db.query(sql, (err,results) => {\n          if(err) return reject(err)\n          resolve(results)\n        })\n      })\n    },\n\n// insert in user or new user_location table\n    saveOne: (data={},table) => {\n      let _keys = Object.keys(data), _values = []\n      let params = Object.values(data).map( v => {\n        _values.push('?')\n        return v\n      })\n      const sql = `INSERT INTO ${table} (${_keys}) VALUES (${_values})`\n      return new Promise( (resolve,reject) => {\n        db.query(sql, params, (err,result) => {\n          if (err) return reject(err)\n          resolve(result.insertId)\n        })\n      })\n    },\n\n// Update user or user_location table\n    updateOne: (data={},table) => {\n      const {id, ...rest} = data\n      const _map = Object.keys(rest).map( entry => {\n        if (entry==='name' || entry==='bell' || entry==='entry')\n        {\n          return `${entry}='${rest[entry]}'`\n        } else {\n          return `${entry}=${rest[entry]}`\n        }\n\n      })\n      const sql =`UPDATE ${table} SET ${_map} WHERE id=${id}`\n      return new Promise( (resolve,reject) => {\n        db.query(sql, err => {\n          if (err) return reject(err)\n          resolve()\n        })\n      } )\n    },\n\n// ID: location ID\n// Get ever FAC with all products in FACs STORE\n    getFac: city => {\n      //f.id,f.city,f.prime,f.open,f.delivery,f.bottleneck,f.mobile\n      const sql = `SELECT\n      f.*,\n      s.product,s.local_promo,s.local_price,s.on_hand,s.take_only,\n      st.name AS street,\n      l.number\n      FROM fac f\n      JOIN store s ON s.fac=f.id AND s.on_hand>0\n      JOIN location l ON l.id=f.location_id\n      JOIN street st ON st.id=l.street_id\n      WHERE f.city=${city} AND f.prime=1\n      AND f.status=7`\n\nconsole.log('Get FACs: ', sql)\n      return new Promise( (resolve,reject) => {\n        db.query(sql, (err,results) => {\n          if(err) return reject(err)\n          //console.log('Get this FAC store: ', results[0])\n          resolve(results)\n        })\n      })\n    }\n\n}\n"]}