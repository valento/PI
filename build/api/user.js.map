{"version":3,"sources":["../../server/api/user.js"],"names":["config","require","options","user","get","password","database","socketPath","host","db","mysql","createConnection","signup","sql","email","data","token","Promise","resolve","reject","query","err","result","insertId","checkOne","scope","results","verify","rows","getOne","table","sc","map","entry","_key","Object","keys","_value","values","console","log","saveOne","_keys","_values","params","push","v","updateOne","id","rest","_map","getAllFac","ids"],"mappings":"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","file":"user.js","sourcesContent":["import mysql from 'mysql'\nimport dotenv from 'dotenv'\nconst config = require('../../config')\n\nconst options = {\n  user: config.get('MYSQL_USER'),\n  password: config.get('MYSQL_PASSWORD'),\n  database: config.get('MYSQL_DB')\n}\n\nif( config.get('INSTANCE_CONNECTION_NAME') && config.get('NODE_ENV') === 'production' ) {\n  options.socketPath = `/cloudsql/${config.get('INSTANCE_CONNECTION_NAME')}`\n} else {\n  options.host = 'localhost'\n}\n\nconst db = mysql.createConnection(options)\n\nexport default {\n\n    signup: data => {\n      let sql = ``\n      const { email,password,token } = data\n      if(email==='valentin.mundrov@gmail.com'){\n        sql = `INSERT INTO user (email,password,membership) VALUES('${email}','${password}',1)`\n      } else {\n        sql = `INSERT INTO user (email,password,token) VALUES('${email}','${password}','${token}');`\n      }\n      return new Promise ((resolve,reject) => {\n        db.query(sql, (err,result) => {\n          if(err) {\n            reject(err)\n          } else {\n            resolve(result.insertId)\n          }\n        })\n      })\n    },\n    checkOne: (email,scope='*') => {\n      const sql = `SELECT ${scope} FROM user WHERE email='${email}'`\n      return new Promise( (resolve, reject) => {\n        db.query(sql, ( err,results ) => {\n          if(!err) {\n            resolve(results)\n          } else {\n            reject(err)\n          }\n        })\n      })\n    },\n    verify: email => {\n      const sql = `UPDATE user SET verified=1 WHERE email='${email}'`\n      return new Promise( (resolve, reject) => {\n        db.query(sql, ( err,rows ) => {\n          if(!err) {\n            resolve(rows)\n          } else {\n            reject(err)\n          }\n        })\n      })\n    },\n// on User.init: returns user and user's locations\n    getOne: (data={},table,scope=['*']) => {\n      let sql\n      let sc = scope.map( entry => 'u.'+entry)\n      const _key = Object.keys(data)\n      const _value = Object.values(data)\n      if(table==='user'){\n        sql = `SELECT ${sc},\n        ul.id,ul.name,ul.door,ul.floor,ul.bell,ul.admin,\n        ul.mobile,ul.location,ul.c_status,ul.prime,\n        l.city\n        FROM user u\n        LEFT OUTER JOIN user_location ul ON u.uid=ul.uid\n        JOIN location l ON l.id=ul.location\n        WHERE u.email='${data.email}'\n        `\n      } else {\n        sql = `SELECT ${scope} FROM ${table} WHERE ${_key}='${_value}'`\n      }\n      console.log(sql)\n      return new Promise( (resolve,reject) => {\n        db.query(sql, (err,results) => {\n          if(table==='user'){\n            console.log('User Init data: ',results)\n          }\n          if(!err) {\n            resolve(results)\n          } else {\n            reject(err)\n          }\n        })\n      })\n    },\n// Save user or user_location table\n    saveOne: (data={},table) => {\n      let _keys = Object.keys(data), _values = []\n      let params = Object.values(data).map( v => {\n        _values.push('?')\n        return v\n      })\n      const sql = `INSERT INTO ${table} (${_keys}) VALUES (${_values})`\n  console.log(sql,params)\n      return new Promise( (resolve,reject) => {\n        db.query(sql, params, (err,result) => {\n          if (err) return reject()\n          resolve(result.insertId)\n        })\n      })\n    },\n// Update user table or user_location table\n    updateOne: (data={},table) => {\n      const {id, ...rest} = data\n      const _map = Object.keys(rest).map( entry => {\n        if (entry==='name' || entry==='bell' || entry==='entry')\n        {\n          return `${entry}='${rest[entry]}'`\n        } else {\n          return `${entry}=${rest[entry]}`\n        }\n\n      })\n      const sql =`UPDATE ${table} SET ${_map} WHERE id=${id}`\n      console.log('ORM: ',sql)\n      return new Promise( (resolve,reject) => {\n        db.query(sql, err => {\n          if (err) return reject()\n          resolve()\n        })\n      } )\n    },\n// IDS: all user location IDs\n// Get every FAC with all products in FACs STORE\n    getAllFac: ids => {\n      const sql = `SELECT fl.fac,fl.city,fl.prime,\n      f.open,f.delivery,f.bottleneck,f.mobile,\n      s.product,s.local_promo,s.local_price,\n      s.on_hand,s.take_only,s.add_time\n      FROM fac_location fl\n      JOIN store s ON fl.fac=s.fac AND s.on_hand>0\n      JOIN fac f ON fl.fac=f.id\n      WHERE fl.city IN (${ids}) AND fl.prime=1\n      AND f.status=7`\n      return new Promise( (resolve,reject) => {\n        db.query(sql, (err,results) => {\n          if(err) return reject(err)\n          resolve(results)\n        })\n      })\n    }\n\n}\n"]}