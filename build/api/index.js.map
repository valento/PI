{"version":3,"sources":["../../server/api/index.js"],"names":["config","require","options","user","get","password","database","socketPath","host","db","mysql","createConnection","getOne","data","table","scope","sql","sc","map","entry","_key","Object","keys","_value","values","email","console","log","Promise","resolve","reject","query","err","results","getOneReference","l","isNaN","uid","getList","params","PARAMS","length","kk","k","join","concat","saveOne","_keys","_values","push","v","result","insertId","saveOneLocation","jsn","bg","lat","street_id","city","number","code","updateOne","id","rest","_map"],"mappings":"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","file":"index.js","sourcesContent":["import mysql from 'mysql'\nimport dotenv from 'dotenv'\nconst config = require('../../config')\n\nconst options = {\n  user: config.get('MYSQL_USER'),\n  password: config.get('MYSQL_PASSWORD'),\n  database: config.get('MYSQL_DB')\n}\n\nif( config.get('INSTANCE_CONNECTION_NAME') && config.get('NODE_ENV') === 'production' ) {\n  options.socketPath = `/cloudsql/${config.get('INSTANCE_CONNECTION_NAME')}`\n} else {\n  options.host = 'localhost'\n}\n\nconst db = mysql.createConnection(options)\n\nexport default {\n  getOne: (data={},table,scope=['*']) => {\n    let sql\n    let sc = scope.map( entry => 'u.'+entry)\n    const _key = Object.keys(data)\n    const _value = Object.values(data)\n    if(table==='user'){\n      sql = `SELECT ${sc},\n      ul.id,ul.name,ul.door,ul.floor,ul.bell,ul.ref,ul.admin,ul.mobile,ul.location,ul.c_status,ul.prime\n      FROM user u\n      LEFT OUTER JOIN user_location ul ON u.uid=ul.uid\n      WHERE u.email='${data.email}'\n      `\n    } else {\n      sql = `SELECT ${scope} FROM ${table} WHERE ${_key}='${_value}'`\n    }\n  console.log(sql)\n    return new Promise( (resolve,reject) => {\n      db.query(sql, (err,results) => {\n        if(table==='user'){console.log('User Init data: ',results)}\n        if(!err) {\n          resolve(results)\n        } else {\n          reject(err)\n        }\n      })\n    })\n  },\n  // GET Location by REP = location.uid\n  getOneReference: (data={},table,scope=['*']) => {\n    let sql, l\n    if(isNaN(data.uid)){\n      l = 'l.uid'\n    } else {\n      l = 'l.id'\n    }\n    sql = `SELECT l.number,l.id,s.name\n    FROM location l INNER JOIN street s\n    WHERE ${l}='${data.uid}'\n    AND s.id=l.street_id`\nconsole.log(sql)\n    return new Promise( (resolve,reject) => {\n      db.query(sql, (err,results) => {\n        if(!err) {\nconsole.log(results)\n          resolve(results)\n        } else {\n          reject(err)\n        }\n      })\n    })\n  },\n  getList: (table,scope=['*'],params=null) => {\n    let PARAMS = ''\n    const _key = params? Object.keys(params) : null\n    if(_key && _key.length > 0) {\n      const kk = _key.map( k => {\n        return `${k}=${params[k]}`\n      })\n      PARAMS = (_key.length > 1)? kk.join(' AND ') : kk[0]\n      if( table === 'product' ) {\n        PARAMS = PARAMS.concat(' ORDER BY list')\n      }\n    }\n    //else if(_key) {\n    //  PARAMS = `${_key[0]}=${params._key[0]}`\n    //}\n\n    let sql = !params? `SELECT ${scope} FROM ${table}`:`SELECT ${scope} FROM ${table} WHERE ${PARAMS}`\n\n    return new Promise( (resolve,reject) => {\n      db.query(sql, params, (err,results) => {\n        if(err) return reject(err)\n        resolve(results)\n      })\n    })\n  },\n  saveOne: (data={},table) => {\n    let _keys = Object.keys(data), _values = []\n    let params = Object.values(data).map( v => {\n      _values.push('?')\n      return v\n    })\n    const sql = `INSERT INTO ${table} (${_keys}) VALUES (${_values})`\nconsole.log(sql,params)\n    return new Promise( (resolve,reject) => {\n      db.query(sql, params, (err,result) => {\n        if (err) return reject()\n        resolve(result.insertId)\n      })\n    })\n  },\n  saveOneLocation: (data={},table) => {\n    let jsn='',sql=''\n    const {bg,lat,uid,street_id,city,number} = data\n\n    switch(table) {\n      case 'city':\n        jsn = `'{\"bg\": \"${bg}\", \"en\": \"${lat}\", \"es\": \"${lat}\"}'`\n        sql = `INSERT INTO ${table} (name,code) VALUES (${jsn},${data.code})`\n      break\n      case 'street':\n        jsn = `'{\"bg\": \"${bg}\", \"en\": \"${lat}\", \"es\": \"${lat}\"}'`\n        sql = `INSERT INTO ${table} (name,city) VALUES (${jsn},${data.city})`\n      break\n      case 'location':\n      console.log(data)\n        sql = `INSERT INTO ${table} (uid,city,street_id,number)\n        VALUES ('${uid}',${city},${street_id},${number})`\n      break\n    }\n\n  console.log(sql,data)\n    return new Promise( (resolve,reject) => {\n      db.query(sql, err => {\n        if (err) return reject()\n        resolve()\n      })\n    })\n  },\n  updateOne: (data={},table) => {\n    const {id, ...rest} = data\n    const _map = Object.keys(rest).map( entry => {\n      if (entry==='name' || entry==='bell' || entry==='entry')\n      {\n        return `${entry}='${rest[entry]}'`\n      } else {\n        return `${entry}=${rest[entry]}`\n      }\n\n    })\n    const sql =`UPDATE ${table} SET ${_map} WHERE id=${id}`\nconsole.log('ORM: ',sql)\n    return new Promise( (resolve,reject) => {\n      db.query(sql, err => {\n        if (err) return reject()\n        resolve()\n      })\n    } )\n  }\n}\n"]}