{"version":3,"sources":["../server/index.old.js"],"names":["dotenv","config","silent","app","server","ENV","process","env","NODE_ENV","PORT","CURRENT_CITY","SINGLE_CITY","WS","require","WSR","router","mediator","EventEmitter","on","console","log","use","express","static","path","join","__dirname","authRouter","userRouter","req","res","next","adminRouter","productRouter","orderRouter","get","getLan","data","params","c_status","lan","city","Number","api","getList","then","cty","response","map","title","JSON","parse","entry","name","id","alt","NULL","cities","mob","match","banner","BANNER","status","json","catch","message","err","sendFile","send","options","key","fs","readFileSync","cert","listen","uconn","rconn","dconn","pconn","bconn","fconn","lconn","rootconn","roles","wsServer","httpServer","autoAcceptConnections","wsrouter","attachServer","mount","request","connection","accept","origin","resourceURL","query","ID","msg","utf8Data","user","fac","role","reasonCode","description","c","indexOf","splice","length","baker","find","push","sendUTF","order","bkr","stringify","forEach","tconn","tester","Date","conn","reason","dsc"],"mappings":"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","file":"index.old.js","sourcesContent":["import express from 'express'\nimport https from 'https'\nimport spdy from 'spdy'\nimport path from 'path'\nimport fs from 'fs'\nimport jwt from 'jsonwebtoken'\nimport dotenv from 'dotenv'\nimport requestLanguage from 'express-request-language'\nimport authRouter from './routes/auth'\nimport userRouter from './routes/user'\nimport adminRouter from './routes/admin'\nimport productRouter from './routes/product'\nimport orderRouter from './routes/order'\nimport api from './api/'\nimport { getLan,orderListener,adminRouterHit } from './middleware/'\nimport { EventEmitter } from 'events'\n\ndotenv.config({silent: true})\nlet app = express(), server\nlet ENV = process.env.NODE_ENV || 'development'\nlet PORT = process.env.NODE_ENV==='production'? process.env.PORT || 8080 : 8080\nlet CURRENT_CITY = process.env.SINGLE_CITY > 0 ? process.env.SINGLE_CITY : 0\n\n// Initiate WEB SOCKET:\nlet WS = require('websocket').server\nlet WSR = require('websocket').router\n\n// Instantiate EVENT EMITTER:\nconst mediator = new EventEmitter()\nmediator.on('baker.login', () => {\n  console.log('Baker Here!')\n})\n\napp.use('/static', express.static(path.join(__dirname, '../client/build/static')) )\napp.use('/img', express.static(path.join(__dirname, '../client/build/img')) )\nif(ENV === 'production') app.use(express.static(path.join(__dirname, '../client/build')) )\n\n// == ROUTES & ROUTERS =====================================\napp.use('/auth', authRouter)\napp.use('/user', userRouter)\napp.use('/admin', (req,res,next) => {\n  req.mediator = mediator\n  next()\n}, adminRouter)\napp.use('/products', productRouter)\napp.use('/orders', orderRouter)\n\n// ========================================================\n\napp.get('/ui', getLan, (req,res,next) => {\n  let data = {}\n  let params = {\n    c_status: 4\n  }\n  const { lan } = req\n// SWITCH to:    req.language// === 'en' ? 'bg' : req.language\n  //if(lng === 'lan') {\n  //  data.lan = req.language==='es'? 'es' : 'bg'\n  //} else {\n  data.lan = lan\n  if(!!CURRENT_CITY) data.city = Number(CURRENT_CITY)\n  //}\n// get cities: ? add params {c_status: 4} if needed\n  api.getList('city',['name','id','zone','code','alt'],params).then( response => {//,{c_status: 4}\n    const cty = response.map( entry => {\n//switch BG to req.language in production\n      return {\n        title: JSON.parse(entry.name)[data.lan],\n        id: entry.id,\n        //status: entry.c_status,\n        alt: entry.alt ? JSON.parse(entry.alt)[data.lan] : NULL\n      }\n    })\n    data.cities = cty\n    data.mob = req.get('user-agent').match((/(Mobile)/g)) ? true : false\n    data.banner = !!(process.env.BANNER == 'true')\n    res.status(200).json(data)\n  })\n  .catch( err => res.status(500).json({message: 'Something went wrong...'}))\n})\n\napp.get('/*', (req,res) => {\n  const {err} = req\n  console.log('Root: ',ENV)\n  if(ENV==='production'){\n    console.log('Running: ',ENV)\n    res.sendFile(path.join(__dirname, '../client/build/index.html'))\n  } else if(!err) {\n    res.send('This is not a Web Page! Check your routes...')\n  } else {\n    res.send(err.message)\n  }\n})\n\nconst options = {\n    key: fs.readFileSync(__dirname + '/ssl/server.key', 'utf8'),\n    cert:fs.readFileSync(__dirname + '/ssl/server.srt', 'utf8')\n  }\n\n//if(ENV==='production') {\n//// TRY HTTP2: no ssl-file\n//  const options = {\n//    key: fs.readFileSync(__dirname + '/ssl/server.key', 'utf8'),\n//    cert:fs.readFileSync(__dirname + '/ssl/server.srt', 'utf8')\n//  }\n//  server = https.createServer(options,app).listen(PORT, error => {\n//    if(error){\n//      console.log(error)\n//      return process.exit(1)\n//    } else {\n//      console.log('HTTPS running on: ', PORT)\n//    }\n//  })\n//} else {\n  server = app.listen(PORT, () => console.log('Server Running on: ',PORT) )\n//}\n\n\n// ==========================================================================\n// ==========================================================================\n// # WebSocket-Node Server #\n// ==========================================================================\n\n// WS Connection Objects List: user,ref,dlv,pos,baker,fac,lab,root\nlet uconn=[], rconn=[], dconn=[], pconn=[], bconn=[], fconn=[], lconn=[], rootconn=[]\n// WS protocols:\nvar roles = ['root','lab','fac','baker','pos','dlv','test','rep','customer']\nlet wsServer = new WS({\n  httpServer: server,\n  autoAcceptConnections: false\n})\nlet wsrouter = new WSR()\nwsrouter.attachServer(wsServer)\n\n// BAKER: =====================================================================\nwsrouter.mount('*','baker-protocol', request => {\n  request.on('requestAccepted', connection => {\n    console.log('WS: Baker is listening!')\n  })\n// get WS.Connection\n  let connection = request.accept(request.origin)\n  const { id } = request.resourceURL.query\n  connection.ID = Number(id)\n\n// Event handlers:\n// ------ MESSAGING Event: ------------------------------------\n  connection.on('message', msg => {\n    const { user,fac,role } = JSON.parse(msg.utf8Data)\n    console.log('Connected Bakers: ', connection.ID)\n    // bconn.find( c => c.id===fac.id ).sendUTF(`Message from User: ${user}, recieved`)\n    //connection.sendUTF(`Message from Baker: ${user}, recieved`)\n  })\n// ------ CLOSE Event: ------------------------------------\n  connection.on('close', (reasonCode, description) => {\n    let c = bconn.indexOf(connection)\n    bconn.splice(c,1)\n    console.log('Baker Sockets: ',bconn.length)\n  })\n\n// Store baker-Connections:\n  let baker = bconn.find( c => c.ID === Number(id) )\n  if( !baker ) bconn.push(connection)\n})\n\n// CUSTOMER: ==================================================================\nwsrouter.mount('*','customer-protocol', request => {\n  request.on('requestAccepted', connection => {\n    connection.sendUTF('WS: Customer accepted!')\n  })\n// get WS.Connection:\n  let connection = request.accept(request.origin)\n  const { id } = request.resourceURL.query\n  connection.ID = Number(id)\n\n// Event handlers:\n// ------ MESSAGING Event: ----------------------\n  connection.on('message', msg => {\n    const { user,fac,role,order } = JSON.parse(msg.utf8Data)\n    console.log('Message from customer:', connection.ID)\n    if(order) {\n      // ping 'baker-protocol'\n      let bkr = bconn.find( c => c.ID === fac )\n      if(bkr) bkr.send(JSON.stringify({ user: id, order: true }))\n    }\n    uconn.forEach( c => {\n      c.sendUTF(`One more Customer: ${user}, recieved`)\n    })\n    //connection.sendUTF(`${uconn.length - 1} Messages from User: ${user}, send`)\n\n  })\n// ------ CLOSE Event: ------------------------------------\n  connection.on('close', (reasonCode, description) => {\n    let c = uconn.indexOf(connection)\n    //if(uconn[c].ID) connection.sendUTF('WS: Customer connection closed!', uconn[c].ID)\n    uconn.splice(c,1)\n    console.log('Consumer Sockets: ',uconn.length)\n  })\n\n// Store unique customer-connections:\n  let user = uconn.find( c => c.ID === Number(id) )\n  if( !user ) uconn.push(connection)\n\n})\n\n// TESTER: =====================================================================\n  wsrouter.mount('*','test-protocol', request => {\n    request.on('requestAccepted', connection => {\n      connection.sendUTF('WS: Tester is listening!')\n    })\n  // get WS.Connection\n    let connection = request.accept(request.origin)\n    const { id } = request.resourceURL.query\n\n  // Event handlers:\n    connection.ID = Number(id)\n    connection.on('message', msg => {\n      const { user,fac,role } = JSON.parse(msg.utf8Data)\n      console.log('WS: Connected Testers: ', tconn.length)\n      // bconn.find( c => c.id===fac.id ).sendUTF(`Message from User: ${user}, recieved`)\n      //connection.sendUTF(`Message from Baker: ${user}, recieved`)\n    })\n  // Store baker-Connections:\n    let tester = tconn.find( c => c.ID === Number(id) )\n    if( !tester ) tconn.push(connection)\n  })\n// ======================================================================\n\n\n// WebSocketServer Class:\n//wsServer.on('request', request => {\n//// request is webSocketRequest Object\n//// .accept returns webSocketConnection Instance\n//  let bakerCon = request.accept('baker-protocol', request.origin)\n//\n//})\n\nwsServer.on('connect', socket => {\n  console.log('Connection created at: ', new Date())\n})\n\nwsServer.on('close', (conn, reason, dsc) => {\n  console.log('Connection closed at: ', conn.ID)\n})\n"]}