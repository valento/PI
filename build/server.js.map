{"version":3,"sources":["../server/server.js"],"names":["start","ENV","options","PORT","CURRENT_CITY","Promise","resolve","reject","app","use","express","static","path","join","__dirname","authRouter","userRouter","req","res","next","adminRouter","productRouter","orderRouter","get","getLan","data","params","status","lan","city","Number","api","getList","then","cty","response","map","title","JSON","parse","entry","name","id","alt","NULL","cities","mob","match","banner","process","env","BANNER","json","catch","message","err","console","log","sendFile","send","server","listen","Object","assign"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express'\r\nimport path from 'path'\r\nimport jwt from 'jsonwebtoken'\r\nimport requestLanguage from 'express-request-language'\r\nimport authRouter from './routes/auth'\r\nimport userRouter from './routes/user'\r\nimport adminRouter from './routes/admin'\r\nimport productRouter from './routes/product'\r\nimport orderRouter from './routes/order'\r\nimport api from './api/'\r\nimport { getLan,orderListener,adminRouterHit } from './middleware/'\r\n\r\nconst start = options => {\r\n\r\n  const { ENV,PORT,CURRENT_CITY } = options\r\n\r\n  return new Promise( (resolve,reject) => {\r\n    let app = express()\r\n\r\n    app.use('/static', express.static(path.join(__dirname, '../client/build/static')) )\r\n    app.use('/img', express.static(path.join(__dirname, '../client/build/img')) )\r\n    if(ENV === 'production') app.use(express.static(path.join(__dirname, '../client/build')) )\r\n\r\n    // == ROUTES & ROUTERS =====================================\r\n    app.use('/auth', authRouter)\r\n    app.use('/user', userRouter)\r\n    app.use('/admin', (req,res,next) => {\r\n      //req.mediator = mediator\r\n      next()\r\n    }, adminRouter)\r\n    app.use('/products', productRouter)\r\n    app.use('/orders', orderRouter)\r\n\r\n    // ========================================================\r\n// GET UI: Citiy list\r\n    app.get('/ui', getLan, (req,res,next) => {\r\n      let data = {}\r\n      let params = {\r\n        status: 1\r\n      }\r\n      const { lan } = req\r\n    // SWITCH to:    req.language// === 'en' ? 'bg' : req.language\r\n      //if(lng === 'lan') {\r\n      //  data.lan = req.language==='es'? 'es' : 'bg'\r\n      //} else {\r\n      data.lan = lan\r\n      if(!!CURRENT_CITY) data.city = Number(CURRENT_CITY)\r\n      //}\r\n    // get cities: ? add params {status: 4} if needed\r\n      api.getList('city',['name','status','id','zone','code','alt'],params)\r\n      .then( response => {//,{c_status: 4}\r\n        const cty = response.map( entry => {\r\n    //switch BG to req.language in production\r\n          return {\r\n            title: JSON.parse(entry.name)[data.lan],\r\n            id: entry.id,\r\n            //status: entry.c_status,\r\n            alt: entry.alt ? JSON.parse(entry.alt)[data.lan] : NULL,\r\n            status: entry.status\r\n          }\r\n        })\r\n        data.cities = cty\r\n        data.mob = req.get('user-agent').match((/(Mobile)/g)) ? true : false\r\n        data.banner = !!(process.env.BANNER == 'true')\r\n        res.status(200).json(data)\r\n      })\r\n      .catch( err => res.status(500).json({message: err}))\r\n    })\r\n\r\n    app.get('/*', (req,res) => {\r\n      const {err} = req\r\n      console.log('Root: ',ENV)\r\n      if(ENV==='production'){\r\n        console.log('Running: ',ENV)\r\n        res.sendFile(path.join(__dirname, '../client/build/index.html'))\r\n      } else if(!err) {\r\n        res.send('This is not a Web Page! Check your routes...')\r\n      } else {\r\n        res.send(err.message)\r\n      }\r\n    })\r\n\r\n    const server = app.listen(PORT, () => {\r\n      console.log('Server Running on: ',PORT)\r\n      resolve(server)\r\n    })\r\n    //resolve(server)\r\n  })\r\n}\r\n\r\nexport default Object.assign({},{ start })\r\n"]}