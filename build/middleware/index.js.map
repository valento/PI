{"version":3,"sources":["../../server/middleware/index.js"],"names":["getUser","req","res","next","token","get","decoded","jwt","verify","process","env","JWT_SECRET","console","log","email","uid","err","status","json","error","message","getLan","lan","getUserId","checkAdmin","id"],"mappings":";;;;;;;AAAA;;;;;;AAEO,IAAMA,4BAAU,SAAVA,OAAU,CAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACvC,MAAMC,QAAQH,IAAII,GAAJ,CAAQ,eAAR,CAAd;AACA,MAAI;AACF,QAAMC,UAAUC,uBAAIC,MAAJ,CAAWJ,KAAX,EAAkBK,QAAQC,GAAR,CAAYC,UAA9B,CAAhB;AACAC,YAAQC,GAAR,CAAY,qBAAZ,EAAkCP,OAAlC;AACAL,QAAIa,KAAJ,GAAYR,QAAQQ,KAApB;AACAb,QAAIc,GAAJ,GAAUT,QAAQS,GAAlB;AACAZ;AACD,GAND,CAME,OAAMa,GAAN,EAAW;AACX,WAAOd,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,EAAEC,SAAS,eAAX,EAAT,EAArB,CAAP;AACD;AACD;AACD,CAZM;;AAcA,IAAMC,0BAAS,SAATA,MAAS,CAACpB,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACtC,MAAMmB,MAAMrB,IAAII,GAAJ,CAAQ,mBAAR,CAAZ;AACAJ,MAAIqB,GAAJ,GAAUA,GAAV;AACAV,UAAQC,GAAR,CAAY,qBAAZ,EAAkCS,GAAlC;AACAnB;AACD,CALM;;AAOA,IAAMoB,gCAAY,SAAZA,SAAY,CAACtB,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACzC,MAAMC,QAAQH,IAAII,GAAJ,CAAQ,eAAR,CAAd;AACA,MAAI;AACF,QAAMC,UAAUC,uBAAIC,MAAJ,CAAWJ,KAAX,EAAiBK,QAAQC,GAAR,CAAYC,UAA7B,CAAhB;AACAC,YAAQC,GAAR,CAAY,qBAAZ,EAAkCP,OAAlC;AACAL,QAAIc,GAAJ,GAAUT,QAAQS,GAAlB;AACD,GAJD,CAIE,OAAMC,GAAN,EAAW;AACX,WAAOd,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,EAAEC,SAAS,eAAX,EAAT,EAArB,CAAP;AACD;AACDjB;AACD,CAVM;;AAYA,IAAMqB,kCAAa,SAAbA,UAAa,CAACvB,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAC1C,MAAMC,QAAQH,IAAII,GAAJ,CAAQ,eAAR,CAAd;AACAE,yBAAIC,MAAJ,CAAWJ,KAAX,EAAkBK,QAAQC,GAAR,CAAYC,UAA9B,EAA0C,UAACK,GAAD,EAAKV,OAAL,EAAiB;AACzD,QAAG,CAACU,GAAD,IAAQV,QAAQQ,KAAR,KAAkB,4BAA7B,EAA2D;AACzDb,UAAIwB,EAAJ,GAASnB,QAAQS,GAAjB;AACAZ;AACD,KAHD,MAGO;AACL,aAAOD,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,EAAEC,SAAS,oBAAX,EAAT,EAArB,CAAP;AACD;AACF,GAPD;AAQD,CAVM","file":"index.js","sourcesContent":["import jwt from 'jsonwebtoken'\n\nexport const getUser = (req,res,next) => {\n  const token = req.get('Authorization')\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET)\n    console.log('/user API-decoded: ',decoded)\n    req.email = decoded.email\n    req.uid = decoded.uid\n    next()\n  } catch(err) {\n    return res.status(401).json({ error: { message: 'Invalid token' }})\n  }\n  //next()\n}\n\nexport const getLan = (req,res,next) => {\n  const lan = req.get('Accepted-Language')\n  req.lan = lan\n  console.log('Accepted-Language: ',lan)\n  next()\n}\n\nexport const getUserId = (req,res,next) => {\n  const token = req.get('Authorization')\n  try {\n    const decoded = jwt.verify(token,process.env.JWT_SECRET)\n    console.log('/user API-decoded: ',decoded)\n    req.uid = decoded.uid\n  } catch(err) {\n    return res.status(401).json({ error: { message: 'Invalid token' }})\n  }\n  next()\n}\n\nexport const checkAdmin = (req,res,next) => {\n  const token = req.get('Authorization')\n  jwt.verify(token, process.env.JWT_SECRET, (err,decoded) => {\n    if(!err && decoded.email === 'valentin.mundrov@gmail.com') {\n      req.id = decoded.uid\n      next()\n    } else {\n      return res.status(401).json({ error: { message: 'Unauthorized User!' }})\n    }\n  })\n}\n"]}