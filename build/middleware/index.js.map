{"version":3,"sources":["../../server/middleware/index.js"],"names":["getUser","req","res","next","token","get","decoded","jwt","decode","console","log","email","err","status","json","message","getLan","lan","getUserId","uid","checkAdmin","verify","process","env","JWT_SECRET","id"],"mappings":";;;;;;;AAAA;;;;;;AAEO,IAAMA,4BAAU,SAAVA,OAAU,CAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACvC,MAAMC,QAAQH,IAAII,GAAJ,CAAQ,eAAR,CAAd;AACA,MAAI;AACF,QAAMC,UAAUC,uBAAIC,MAAJ,CAAWJ,KAAX,CAAhB;AACAK,YAAQC,GAAR,CAAY,qBAAZ,EAAkCJ,OAAlC;AACAL,QAAIU,KAAJ,GAAYL,QAAQK,KAApB;AACD,GAJD,CAIE,OAAMC,GAAN,EAAW;AACX,WAAOV,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,eAAV,EAArB,CAAP;AACD;AACDZ;AACD,CAVM;;AAYA,IAAMa,0BAAS,SAATA,MAAS,CAACf,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACtC,MAAMc,MAAMhB,IAAII,GAAJ,CAAQ,mBAAR,CAAZ;AACAJ,MAAIgB,GAAJ,GAAUA,GAAV;AACAR,UAAQC,GAAR,CAAY,qBAAZ,EAAkCO,GAAlC;AACAd;AACD,CALM;;AAOA,IAAMe,gCAAY,SAAZA,SAAY,CAACjB,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACzC,MAAMC,QAAQH,IAAII,GAAJ,CAAQ,eAAR,CAAd;AACA,MAAI;AACF,QAAMC,UAAUC,uBAAIC,MAAJ,CAAWJ,KAAX,CAAhB;AACAK,YAAQC,GAAR,CAAY,qBAAZ,EAAkCJ,OAAlC;AACAL,QAAIkB,GAAJ,GAAUb,QAAQa,GAAlB;AACD,GAJD,CAIE,OAAMP,GAAN,EAAW;AACX,WAAOV,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,eAAV,EAArB,CAAP;AACD;AACDZ;AACD,CAVM;;AAYA,IAAMiB,kCAAa,SAAbA,UAAa,CAACnB,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAC1C,MAAMC,QAAQH,IAAII,GAAJ,CAAQ,eAAR,CAAd;AACAE,yBAAIc,MAAJ,CAAWjB,KAAX,EAAkBkB,QAAQC,GAAR,CAAYC,UAA9B,EAA0C,UAACZ,GAAD,EAAKN,OAAL,EAAiB;AACzD,QAAG,CAACM,GAAD,IAAQN,QAAQK,KAAR,KAAkB,4BAA7B,EAA2D;AACzDV,UAAIwB,EAAJ,GAASnB,QAAQa,GAAjB;AACAhB;AACD,KAHD,MAGO;AACL,aAAOD,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,oBAAV,EAArB,CAAP;AACD;AACF,GAPD;AAQD,CAVM","file":"index.js","sourcesContent":["import jwt from 'jsonwebtoken'\n\nexport const getUser = (req,res,next) => {\n  const token = req.get('Authorization')\n  try {\n    const decoded = jwt.decode(token)\n    console.log('/user API-decoded: ',decoded)\n    req.email = decoded.email\n  } catch(err) {\n    return res.status(401).json({message: 'Invalid token'})\n  }\n  next()\n}\n\nexport const getLan = (req,res,next) => {\n  const lan = req.get('Accepted-Language')\n  req.lan = lan\n  console.log('Accepted-Language: ',lan)\n  next()\n}\n\nexport const getUserId = (req,res,next) => {\n  const token = req.get('Authorization')\n  try {\n    const decoded = jwt.decode(token)\n    console.log('/user API-decoded: ',decoded)\n    req.uid = decoded.uid\n  } catch(err) {\n    return res.status(401).json({message: 'Invalid token'})\n  }\n  next()\n}\n\nexport const checkAdmin = (req,res,next) => {\n  const token = req.get('Authorization')\n  jwt.verify(token, process.env.JWT_SECRET, (err,decoded) => {\n    if(!err && decoded.email === 'valentin.mundrov@gmail.com') {\n      req.id = decoded.uid\n      next()\n    } else {\n      return res.status(401).json({message: 'Unauthorized User!'})\n    }\n  })\n}\n"]}