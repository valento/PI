{"version":3,"sources":["../../server/routes/auth.js"],"names":["authRouter","express","Router","mergeParams","use","bodyParser","json","post","req","res","next","new_user","user","token","confirmToken","pass","email","body","credentials","jwtOptions","expiresIn","scope","api","checkOne","then","results","length","uid","jwt","sign","process","env","JWT_SECRET","Object","assign","status","generator","generate","numbers","bcrypt","hash","err","signup","password","console","log","id","catch","get","params","decoded","decode","errr","message","redirect","verify","rows"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express'\nimport bcrypt from 'bcrypt'\nimport generator from 'generate-password'\nimport jwt from 'jsonwebtoken'\nimport bodyParser from 'body-parser'\nimport api from '../api/user'\nimport { sendConfirmMail } from '../mailer'\n\nlet authRouter = express.Router({\n  mergeParams: true\n})\n\nauthRouter.use(bodyParser.json())\n\nauthRouter.post('/', (req,res,next) => {\n  let new_user = true, user, token, confirmToken, pass\n  const { email } = req.body.credentials\n  const jwtOptions = {\n    expiresIn: '240d',\n  }\n  const scope = ['username','userlast','uid','verified','credit','gender','bday','membership','language','status']\n  api.checkOne(email,scope).then( results => {\n// User exist:\n    if(results.length > 0){\n      const { uid } = results[0]\n      token = jwt.sign({email:email,uid:uid},process.env.JWT_SECRET,jwtOptions)\n      user = Object.assign({},{token: token, new_user: false},results[0])\n      res.status(200).json({user})\n    } else {\n// User is new:\n      confirmToken = jwt.sign({email},process.env.JWT_SECRET,jwtOptions)\n      pass = generator.generate({\n        length: 8,\n        numbers: true\n      })\n// encrypt password and save it to DB:\n      bcrypt.hash(pass, 8, (err,hash) => {\n        if(!err){\n          api.signup({email:email,password:hash,token:confirmToken})\n          .then( id => {\n// Send mail to User with confirmToken:\n            sendConfirmMail(email,confirmToken)\n            console.log('authRouter:',id)\n// Generate Token for localStorage:\n            token = jwt.sign({email:email,uid:id},process.env.JWT_SECRET,jwtOptions)\n            user = Object.assign({},{token: token, new_user: true})\n            res.status(200).json({user})\n          })\n          .catch( err => {\n            res.status(500).json(err)\n          })\n        }\n      })\n    }\n  })\n  .catch(err => console.log(err))\n})\n\nauthRouter.get('/confirmation/:token', (req,res,next) => {\n  const { token } = req.params\n  const decoded = jwt.decode(token)\n  if( !decoded || decoded === null ) {\n    console.log('Invalid verification token...')\n    req.errr = { message: 'Invalid verification token...'}\n    //next()\n    res.redirect('/')\n  } else {\n    api.verify(decoded.email,['email']).then( rows => {\n      if(rows === 0) {\n        req.errr = {message: 'No such user'}\n      }\n    //next()\n    res.redirect('/')\n    })\n    .catch( err => ({message: 'Something went wrong'}) )\n  }\n})\n\nexport default authRouter\n"]}