{"version":3,"sources":["../../server/routes/auth.js"],"names":["authRouter","express","Router","mergeParams","use","bodyParser","json","post","req","res","next","new_user","user","uname","token","confirmToken","pass","role","member","email","body","credentials","console","log","split","t","rest","join","jwtOptions","expiresIn","scope","api","checkOne","then","results","length","uid","getOne","status","error","message","username","userlast","verified","orders","credit","gender","bday","membership","language","jwt","sign","process","env","JWT_SECRET","Object","assign","locations","forEach","mobile","ent","name","location","city","admin","door","floor","bell","id","entry","prime","c_status","push","err","generator","generate","numbers","u","bcrypt","hash","signup","password","catch","get","getUser","params","decoded","decode","errr","redirect","verify","rows"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;AAEA,IAAIA,aAAaC,kBAAQC,MAAR,CAAe;AAC9BC,eAAa;AADiB,CAAf,CAAjB;;AAIAH,WAAWI,GAAX,CAAeC,qBAAWC,IAAX,EAAf;;AAEAN,WAAWO,IAAX,CAAgB,GAAhB,EAAqB,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACrC,MAAIC,WAAW,IAAf;AAAA,MAAqBC,aAArB;AAAA,MAA2BC,cAA3B;AAAA,MACIC,cADJ;AAAA,MACWC,qBADX;AAAA,MACyBC,aADzB;AAAA,MAC+BC,aAD/B;AAAA,MACqCC,eADrC;AADqC,MAG7BC,KAH6B,GAGnBX,IAAIY,IAAJ,CAASC,WAHU,CAG7BF,KAH6B;;AAIrCG,UAAQC,GAAR,CAAYJ,MAAMK,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAZ;AACF;;AALuC,6BAMfL,MAAMK,KAAN,CAAY,GAAZ,EAAiB,CAAjB,EAAoBA,KAApB,CAA0B,GAA1B,CANe;AAAA;AAAA,MAM7BC,CAN6B;AAAA,MAMxBC,IANwB;AAOvC;;;AACE,UAAQP,MAAMK,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAR;AACE,SAAK,MAAL;AACEP,aAAOE,MAAMK,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAP;AACAN,eAAS,CAAT;AACAL,cAAQ,cAAR;AACF;AACA,SAAK,OAAL;AACEI,aAAOE,MAAMK,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAP;AACAN,eAAS,CAAT;AACAL,cAAQa,KAAKC,IAAL,CAAU,GAAV,CAAR;AACF;AACA,SAAK,QAAL;AACEV,aAAOE,MAAMK,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAP;AACAN,eAAS,EAAT;AACAL,cAAQa,KAAKC,IAAL,CAAU,GAAV,CAAR;AACF;AACA;AAASV,aAAO,IAAP;AAhBX;AAkBA;;AAEA,MAAMW,aAAa,EAAEC,WAAW,MAAb,EAAnB;AACA,MAAMC,QAAQ,CACZ,UADY,EACD,UADC,EACU,KADV,EACgB,UADhB,EAC2B,QAD3B,EACoC,QADpC,EAEZ,QAFY,EAEH,MAFG,EAEI,YAFJ,EAEiB,UAFjB,EAE4B,QAF5B,CAAd;AAIAC,iBAAIC,QAAJ,CAAcb,KAAd,EAAoBW,KAApB,EAA4BG,IAA5B,CAAkC,mBAAW;AAC/C;AACI,QAAGC,QAAQC,MAAR,GAAiB,CAApB,EAAsB;AAAA,UACZC,GADY,GACJF,QAAQ,CAAR,CADI,CACZE,GADY;AAEpB;;AAEA,UAAI;AACFL,uBAAIM,MAAJ,CAAW,EAAElB,OAAOA,KAAT,EAAX,EAA4B,MAA5B,EAAmCW,KAAnC,EACCG,IADD,CACO,mBAAW;AAChB,cAAGC,QAAQC,MAAR,KAAmB,CAAtB,EAAyB,OAAO1B,IAAI6B,MAAJ,CAAW,GAAX,EAAgBhC,IAAhB,CAAqB,EAACiC,OAAO,EAACC,SAAS,gBAAV,EAAR,EAArB,CAAP;;AAEzB;;AAHgB,0BAOZN,QAAQ,CAAR,CAPY;AAAA,cAKdE,GALc,aAKdA,GALc;AAAA,cAKVK,QALU,aAKVA,QALU;AAAA,cAKDC,QALC,aAKDA,QALC;AAAA,cAKQC,QALR,aAKQA,QALR;AAAA,cAKiBC,MALjB,aAKiBA,MALjB;AAAA,cAKwBC,MALxB,aAKwBA,MALxB;AAAA,cAMdC,MANc,aAMdA,MANc;AAAA,cAMPC,IANO,aAMPA,IANO;AAAA,cAMFC,UANE,aAMFA,UANE;AAAA,cAMSC,QANT,aAMSA,QANT;AAAA,cAMkBX,MANlB,aAMkBA,MANlB;AAAA,cAM4BZ,IAN5B;;AAShBZ,kBAAQoC,uBAAIC,IAAJ,CAAS,EAAChC,OAAMA,KAAP,EAAaiB,KAAIA,GAAjB,EAAqBlB,QAAO8B,UAA5B,EAAT,EAAiDI,QAAQC,GAAR,CAAYC,UAA7D,EAAwE1B,UAAxE,CAAR;;AAEAhB,iBAAO2C,OAAOC,MAAP,CAAc,EAAd,EAAiB,EAAC1C,OAAOA,KAAR,EAAeH,UAAU,KAAzB,EAAjB,EAAiD;AACtDyB,oBADsD,EAClDK,kBADkD,EACzCC,kBADyC,EAChCC,kBADgC,EACvBC,cADuB,EAChBC,cADgB;AAEtDC,0BAFsD,EAE/CC,UAF+C,EAE1CC,sBAF0C,EAE/BC,kBAF+B,EAEtBX;AAFsB,WAAjD,CAAP;;AAKA,cAAGJ,QAAQC,MAAR,GAAiB,CAApB,EAAsB;AACpBvB,iBAAK6C,SAAL,GAAgB,EAAhB;AACAvB,oBAAQwB,OAAR,CAAiB,eAAO;AAAA,kBACfC,MADe,GAC4DC,GAD5D,CACfD,MADe;AAAA,kBACRE,IADQ,GAC4DD,GAD5D,CACRC,IADQ;AAAA,kBACHC,QADG,GAC4DF,GAD5D,CACHE,QADG;AAAA,kBACMC,IADN,GAC4DH,GAD5D,CACMG,IADN;AAAA,kBACWC,KADX,GAC4DJ,GAD5D,CACWI,KADX;AAAA,kBACiBC,IADjB,GAC4DL,GAD5D,CACiBK,IADjB;AAAA,kBACsBC,KADtB,GAC4DN,GAD5D,CACsBM,KADtB;AAAA,kBAC4BC,IAD5B,GAC4DP,GAD5D,CAC4BO,IAD5B;AAAA,kBACiCC,EADjC,GAC4DR,GAD5D,CACiCQ,EADjC;AAAA,kBACoCC,KADpC,GAC4DT,GAD5D,CACoCS,KADpC;AAAA,kBAC0CC,KAD1C,GAC4DV,GAD5D,CAC0CU,KAD1C;AAAA,kBACgDC,QADhD,GAC4DX,GAD5D,CACgDW,QADhD;;AAEtB,kBAAGA,aAAa,CAAhB,EAAkB;AAChB3D,qBAAK6C,SAAL,CAAee,IAAf,CAAoB,EAACb,cAAD,EAAQE,UAAR,EAAaC,kBAAb,EAAsBC,UAAtB,EAA2BC,YAA3B,EAAiCC,UAAjC,EAAsCC,YAAtC,EAA4CC,UAA5C,EAAiDC,MAAjD,EAAoDC,YAApD,EAA0DC,YAA1D,EAApB;AACA;AACH,aALD;AAMD,WARD,MAQO;AACL,gBAAI5C,KAAK0C,EAAL,KAAY,IAAhB,EAAsB;AACpBxD,mBAAK6C,SAAL,GAAgB,EAAhB;AACA7C,mBAAK6C,SAAL,CAAee,IAAf,CAAoB9C,IAApB;AACD;AACF;AACDjB,cAAI6B,MAAJ,CAAW,GAAX,EAAgBhC,IAAhB,CAAqB,EAACM,UAAD,EAArB;AACD,SAhCD;AAiCD,OAlCD,CAkCE,OAAM6D,GAAN,EAAW;AACXhE,YAAI6B,MAAJ,CAAW,GAAX,EAAgBhC,IAAhB,CAAqB,EAAEiC,OAAO,EAAEC,SAASiC,GAAX,EAAT,EAArB;AACD;AACF;AACL;AA1CI,SA2CK;AACHnD,gBAAQC,GAAR,CAAY,iBAAZ,EAA8BN,IAA9B;AACN;AACMF,uBAAemC,uBAAIC,IAAJ,CAAS,EAAEhC,YAAF,EAAT,EAAmBiC,QAAQC,GAAR,CAAYC,UAA/B,EAA0C1B,UAA1C,CAAf;AACAZ,eAAO0D,2BAAUC,QAAV,CAAmB;AACxBxC,kBAAQ,CADgB;AAExByC,mBAAS;AAFe,SAAnB,CAAP;AAIA,YAAIC,IAAI5D,OAAO,EAACwB,UAAU5B,KAAX,EAAkBmC,YAAY9B,MAA9B,EAAP,GAA+C,EAAvD;AACAI,gBAAQC,GAAR,CAAY,oBAAZ,EAAiCsD,CAAjC;AACN;AACMC,yBAAOC,IAAP,CAAY/D,IAAZ,EAAkB,CAAlB,EAAqB,UAACyD,GAAD,EAAKM,IAAL,EAAc;AACjC,cAAG,CAACN,GAAJ,EAAQ;AACN,gBAAI;AACF1C,6BAAIiD,MAAJ,CAAWzB,OAAOC,MAAP,CAAc,EAACrC,OAAMA,KAAP,EAAa8D,UAASF,IAAtB,EAA2BjE,OAAMC,YAAjC,EAAd,EAA6D8D,CAA7D,CAAX,EACC5C,IADD,CACO,cAAM;AACvB;AACY,6CAAgBd,KAAhB,EAAsBJ,YAAtB;AACAO,wBAAQC,GAAR,CAAY,aAAZ,EAA0B6C,EAA1B,EAA6BlD,MAA7B;AACZ;;AAEY,oBAAI;AACFa,iCAAIM,MAAJ,CAAW,EAAElB,OAAOA,KAAT,EAAX,EAA4B,MAA5B,EAAmCW,KAAnC,EACCG,IADD,CACO,mBAAW;AAChB,wBAAGC,QAAQC,MAAR,KAAmB,CAAtB,EAAyB,OAAO1B,IAAI6B,MAAJ,CAAW,GAAX,EAAgBhC,IAAhB,CAAqB,EAACiC,OAAO,EAACC,SAAS,gBAAV,EAAR,EAArB,CAAP;;AADT,qCAKZN,QAAQ,CAAR,CALY;AAAA,wBAGdE,GAHc,cAGdA,GAHc;AAAA,wBAGVK,QAHU,cAGVA,QAHU;AAAA,wBAGDC,QAHC,cAGDA,QAHC;AAAA,wBAGQC,QAHR,cAGQA,QAHR;AAAA,wBAGiBC,MAHjB,cAGiBA,MAHjB;AAAA,wBAGwBC,MAHxB,cAGwBA,MAHxB;AAAA,wBAIdC,MAJc,cAIdA,MAJc;AAAA,wBAIPC,IAJO,cAIPA,IAJO;AAAA,wBAIFC,UAJE,cAIFA,UAJE;AAAA,wBAISC,QAJT,cAISA,QAJT;AAAA,wBAIkBX,MAJlB,cAIkBA,MAJlB;AAAA,wBAI4BZ,IAJ5B;;AAOhBZ,4BAAQoC,uBAAIC,IAAJ,CAAS,EAAChC,OAAMA,KAAP,EAAaiB,KAAIgC,EAAjB,EAAoBlD,QAAO8B,UAA3B,EAAT,EAAgDI,QAAQC,GAAR,CAAYC,UAA5D,EAAuE1B,UAAvE,CAAR;;AAEAhB,2BAAO2C,OAAOC,MAAP,CAAc,EAAd,EAAiB,EAAC1C,OAAOA,KAAR,EAAeH,UAAU,IAAzB,EAAjB,EAAgD;AACrDyB,8BADqD,EACjDK,kBADiD,EACxCC,kBADwC,EAC/BC,kBAD+B,EACtBC,cADsB,EACfC,cADe;AAErDC,oCAFqD,EAE9CC,UAF8C,EAEzCC,sBAFyC,EAE9BC,kBAF8B,EAErBX;AAFqB,qBAAhD,CAAP;;AAKA7B,wBAAI6B,MAAJ,CAAW,GAAX,EAAgBhC,IAAhB,CAAqB,EAACM,UAAD,EAArB;AACD,mBAhBD;AAiBD,iBAlBD,CAkBE,OAAM6D,GAAN,EAAW;AACXhE,sBAAI6B,MAAJ,CAAW,GAAX,EAAgBhC,IAAhB,CAAqB,EAAEiC,OAAO,EAAEC,SAASiC,GAAX,EAAT,EAArB;AACD;AAEF,eA7BD;AA8BD,aA/BD,CA+BE,OAAMA,GAAN,EAAW;AACXhE,kBAAI6B,MAAJ,CAAW,GAAX,EAAgBhC,IAAhB,CAAqB,EAAEiC,OAAO,EAAEC,SAASiC,GAAX,EAAT,EAArB;AACD;AACJ;AAAC,SApCF;AAqCD;AACF,GA9FD,EA+FCS,KA/FD,CA+FQ;AAAA,WAAOzE,IAAI6B,MAAJ,CAAW,GAAX,EAAgBhC,IAAhB,CAAqBmE,GAArB,CAAP;AAAA,GA/FR;AAgGD,CAjID;;AAmIA;AACAzE,WAAWmF,GAAX,CAAe,QAAf,EAAyBC,mBAAzB,EAAkC,UAAC5E,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAAA,MAC1C0B,GAD0C,GAC5B5B,GAD4B,CAC1C4B,GAD0C;AAAA,MACtCjB,KADsC,GAC5BX,GAD4B,CACtCW,KADsC;;AAElDY,iBAAIC,QAAJ,CAAab,KAAb,EAAoBc,IAApB,CAA0B,mBAAW;AACnC,QAAGC,QAAQC,MAAR,GAAe,CAAlB,EAAoB;AAClB1B,UAAI6B,MAAJ,CAAW,GAAX,EAAgBhC,IAAhB,CAAqB4B,OAArB;AACD,KAFD,MAEO;AACLzB,UAAI6B,MAAJ,CAAW,GAAX,EAAgBhC,IAAhB,CAAqB,EAACiC,OAAO,EAACC,SAAS,cAAV,EAAR,EAArB;AACD;AACF,GAND;AAOD,CATD;;AAWAxC,WAAWmF,GAAX,CAAe,sBAAf,EAAuC,UAAC3E,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAAA,MAC/CI,KAD+C,GACrCN,IAAI6E,MADiC,CAC/CvE,KAD+C;;AAEvD,MAAMwE,UAAUpC,uBAAIqC,MAAJ,CAAWzE,KAAX,CAAhB;AACA,MAAI,CAACwE,OAAD,IAAYA,YAAY,IAA5B,EAAmC;AACjChE,YAAQC,GAAR,CAAY,+BAAZ;AACAf,QAAIgF,IAAJ,GAAW,EAAEhD,SAAS;AACtB;AADW,KAAX,CAEA/B,IAAIgF,QAAJ,CAAa,GAAb;AACD,GALD,MAKO;AACL1D,mBAAI2D,MAAJ,CAAWJ,QAAQnE,KAAnB,EAAyB,CAAC,OAAD,CAAzB,EAAoCc,IAApC,CAA0C,gBAAQ;AAChD,UAAG0D,SAAS,CAAZ,EAAe;AACbnF,YAAIgF,IAAJ,GAAW,EAAChD,SAAS,cAAV,EAAX;AACD;AACH;AACA/B,UAAIgF,QAAJ,CAAa,GAAb;AACC,KAND,EAOCP,KAPD,CAOQ;AAAA,aAAQ,EAAC1C,SAAS,sBAAV,EAAR;AAAA,KAPR;AAQD;AACF,CAlBD;;kBAoBexC,U","file":"auth.js","sourcesContent":["import express from 'express'\nimport bcrypt from 'bcrypt'\nimport generator from 'generate-password'\nimport jwt from 'jsonwebtoken'\nimport bodyParser from 'body-parser'\nimport api from '../api/user'\nimport { sendConfirmMail } from '../mailer'\nimport { getUser } from '../middleware/'\n\nlet authRouter = express.Router({\n  mergeParams: true\n})\n\nauthRouter.use(bodyParser.json())\n\nauthRouter.post('/', (req,res,next) => {\n  let new_user = true, user, uname,\n      token, confirmToken, pass, role, member\n  const { email } = req.body.credentials\n  console.log(email.split('.')[0])\n// Tester User:\n  const [ t,...rest ] = email.split('@')[0].split('.')\n// Check ROLE-USER: (baker,tester,boss)\n  switch( email.split('.')[0] ) {\n    case 'boss':\n      role = email.split('.')[0]\n      member = 1\n      uname = 'Boss Valento'\n    break\n    case 'baker':\n      role = email.split('.')[0]\n      member = 8\n      uname = rest.join('.')\n    break\n    case 'tester':\n      role = email.split('.')[0]\n      member = 64\n      uname = rest.join('.')\n    break\n    default: role = null\n  }\n  //if(tester) {  }\n\n  const jwtOptions = { expiresIn: '240d' }\n  const scope = [\n    'username','userlast','uid','verified','orders','credit',\n    'gender','bday','membership','language','status'\n  ]\n  api.checkOne( email,scope ).then( results => {\n// --- Login -> User exist but No token: ---\n    if(results.length > 0){\n      const { uid } = results[0]\n      //user = Object.assign({},{token: token, new_user: false},results[0])\n\n      try {\n        api.getOne({ email: email },'user',scope)\n        .then( results => {\n          if(results.length === 0) return res.status(401).json({error: {message: 'User Not Found'}})\n\n          //let user = {}\n          const {\n            uid,username,userlast,verified,orders,credit,\n            gender,bday,membership,language,status,...rest\n          } = results[0]\n\n          token = jwt.sign({email:email,uid:uid,member:membership},process.env.JWT_SECRET,jwtOptions)\n\n          user = Object.assign({},{token: token, new_user: false},{\n            uid,username,userlast,verified,orders,credit,\n            gender,bday,membership,language,status\n          })\n\n          if(results.length > 1){\n            user.locations =[]\n            results.forEach( ent => {\n              const {mobile,name,location,city,admin,door,floor,bell,id,entry,prime,c_status} = ent\n              if(c_status === 4){\n                user.locations.push({mobile,name,location,city,admin,door,floor,bell,id,entry,prime}\n              )}\n            })\n          } else {\n            if( rest.id !== null ){\n              user.locations =[]\n              user.locations.push(rest)\n            }\n          }\n          res.status(200).json({user})\n        })\n      } catch(err) {\n        res.status(500).json({ error: { message: err }})\n      }\n    }\n// --- SignUp -> New User: ---\n    else {\n      console.log('Insert New User',role)\n// Generate Pass and Confirmation Token:\n      confirmToken = jwt.sign({ email },process.env.JWT_SECRET,jwtOptions)\n      pass = generator.generate({\n        length: 8,\n        numbers: true\n      })\n      let u = role ? {username: uname, membership: member} : {}\n      console.log('Object to Insert: ',u)\n// encrypt password and save it to DB:\n      bcrypt.hash(pass, 8, (err,hash) => {\n        if(!err){\n          try {\n            api.signup(Object.assign({email:email,password:hash,token:confirmToken},u))\n            .then( id => {\n  // Send mail to User with confirmToken:\n              sendConfirmMail(email,confirmToken)\n              console.log('authRouter:',id,member)\n  // Generate Access User Token for localStorage:\n\n              try {\n                api.getOne({ email: email },'user',scope)\n                .then( results => {\n                  if(results.length === 0) return res.status(401).json({error: {message: 'User Not Found'}})\n                  const {\n                    uid,username,userlast,verified,orders,credit,\n                    gender,bday,membership,language,status,...rest\n                  } = results[0]\n\n                  token = jwt.sign({email:email,uid:id,member:membership},process.env.JWT_SECRET,jwtOptions)\n\n                  user = Object.assign({},{token: token, new_user: true},{\n                    uid,username,userlast,verified,orders,credit,\n                    gender,bday,membership,language,status\n                  })\n\n                  res.status(200).json({user})\n                })\n              } catch(err) {\n                res.status(500).json({ error: { message: err }})\n              }\n\n            })\n          } catch(err) {\n            res.status(500).json({ error: { message: err }})\n          }\n      }})\n    }\n  })\n  .catch( err => res.status(500).json(err) )\n})\n\n// Check if User UID Exist and STATUS:4:\nauthRouter.get('/check', getUser, (req,res,next) => {\n  const { uid,email } = req\n  api.checkOne(email).then( results => {\n    if(results.length>0){\n      res.status(200).json(results)\n    } else {\n      res.status(401).json({error: {message: 'No such User'}})\n    }\n  })\n})\n\nauthRouter.get('/confirmation/:token', (req,res,next) => {\n  const { token } = req.params\n  const decoded = jwt.decode(token)\n  if( !decoded || decoded === null ) {\n    console.log('Invalid verification token...')\n    req.errr = { message: 'Invalid verification token...'}\n    //next()\n    res.redirect('/')\n  } else {\n    api.verify(decoded.email,['email']).then( rows => {\n      if(rows === 0) {\n        req.errr = {message: 'No such user'}\n      }\n    //next()\n    res.redirect('/')\n    })\n    .catch( err => ({message: 'Something went wrong'}) )\n  }\n})\n\nexport default authRouter\n"]}