{"version":3,"sources":["../../server/routes/auth.js"],"names":["authRouter","express","Router","mergeParams","use","bodyParser","json","post","req","res","next","new_user","user","token","confirmToken","pass","email","body","credentials","jwtOptions","expiresIn","scope","api","checkOne","then","results","length","jwt","sign","uid","process","env","JWT_SECRET","getOne","response","status","error","message","username","userlast","verified","orders","credit","gender","bday","membership","language","rest","Object","assign","locations","forEach","mobile","ent","name","location","city","admin","door","floor","bell","id","entry","prime","c_status","push","err","generator","generate","numbers","bcrypt","hash","signup","password","console","log","catch","get","getUser","params","decoded","decode","errr","redirect","verify","rows"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express'\nimport bcrypt from 'bcrypt'\nimport generator from 'generate-password'\nimport jwt from 'jsonwebtoken'\nimport bodyParser from 'body-parser'\nimport api from '../api/user'\nimport { sendConfirmMail } from '../mailer'\nimport { getUser } from '../middleware/'\n\nlet authRouter = express.Router({\n  mergeParams: true\n})\n\nauthRouter.use(bodyParser.json())\n\nauthRouter.post('/', (req,res,next) => {\n  let new_user = true, user, token, confirmToken, pass\n  const { email } = req.body.credentials\n  const jwtOptions = { expiresIn: '240d' }\n  const scope = [\n    'username','userlast','uid','verified','orders','credit',\n    'gender','bday','membership','language','status'\n  ]\n  api.checkOne( email,scope ).then( results => {\n// --- Login -> User exist but No token: ---\n    if(results.length > 0){\n      //const { uid } = results[0]\n      token = jwt.sign({email:email,uid:uid},process.env.JWT_SECRET,jwtOptions)\n      //user = Object.assign({},{token: token, new_user: false},results[0])\n      try {\n        api.getOne({ email: email },'user',scope)\n        .then( response => {\n          if(response.length === 0) return res.status(401).json({error: {message: 'User Not Found'}})\n\n          //let user = {}\n          const {\n            uid,username,userlast,verified,orders,credit,\n            gender,bday,membership,language,status,...rest\n          } = response[0]\n\n          user = Object.assign({},{token: token, new_user: false},{\n            uid,username,userlast,verified,orders,credit,\n            gender,bday,membership,language,status\n          })\n\n          if(response.length > 1){\n            user.locations =[]\n            response.forEach( ent => {\n              const {mobile,name,location,city,admin,door,floor,bell,id,entry,prime,c_status} = ent\n              if(c_status === 4){\n                user.locations.push({mobile,name,location,city,admin,door,floor,bell,id,entry,prime}\n              )}\n            })\n          } else {\n            if( rest.id !== null ){\n              user.locations =[]\n              user.locations.push(rest)\n            }\n          }\n          res.status(200).json({user})\n        })\n      } catch(err) {\n        res.status(500).json({ error: { message: err }})\n      }\n    }\n// --- SignUp -> New User: ---\n    else {\n// Generate Pass and Confirmation Token:\n      confirmToken = jwt.sign({ email },process.env.JWT_SECRET,jwtOptions)\n      pass = generator.generate({\n        length: 8,\n        numbers: true\n      })\n// encrypt password and save it to DB:\n      bcrypt.hash(pass, 8, (err,hash) => {\n        if(!err){\n          try {\n            api.signup({email:email,password:hash,token:confirmToken})\n            .then( id => {\n  // Send mail to User with confirmToken:\n              sendConfirmMail(email,confirmToken)\n              console.log('authRouter:',id)\n  // Generate Token for localStorage:\n              token = jwt.sign({email:email,uid:id},process.env.JWT_SECRET,jwtOptions)\n              user = Object.assign({},{token: token, new_user: true})\n              res.status(200).json({user})\n            })\n          } catch(err) {\n            res.status(500).json(err)\n          }\n      }})\n    }\n  })\n  .catch( err => console.log(err) )\n})\n\n// Check if User UID Exist and STATUS:4:\nauthRouter.get('/check', getUser, (req,res,next) => {\n  const { uid,email } = req\n  api.checkOne(email).then( results => {\n    if(results.length>0){\n      res.status(200).json(results)\n    } else {\n      res.status(401).json({error: {message: 'No such User'}})\n    }\n  })\n})\n\nauthRouter.get('/confirmation/:token', (req,res,next) => {\n  const { token } = req.params\n  const decoded = jwt.decode(token)\n  if( !decoded || decoded === null ) {\n    console.log('Invalid verification token...')\n    req.errr = { message: 'Invalid verification token...'}\n    //next()\n    res.redirect('/')\n  } else {\n    api.verify(decoded.email,['email']).then( rows => {\n      if(rows === 0) {\n        req.errr = {message: 'No such user'}\n      }\n    //next()\n    res.redirect('/')\n    })\n    .catch( err => ({message: 'Something went wrong'}) )\n  }\n})\n\nexport default authRouter\n"]}