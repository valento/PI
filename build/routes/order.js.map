{"version":3,"sources":["../../server/routes/order.js"],"names":["orderRouter","express","Router","mergeParams","use","bodyParser","json","post","getUserId","getLan","req","res","next","ui","en","es","bg","uid","member","lan","order","status","message","body","data","user_location","delivery","fac_id","total","cart","api","saveOne","Object","assign","then","id","details","map","order_id","item","o","product","quant","saveMany","updateOne","orders","catch","err","get"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAIA,cAAcC,kBAAQC,MAAR,CAAe;AAC/BC,eAAa;AADkB,CAAf,CAAlB;;AAIAH,YAAYI,GAAZ,CAAgBC,qBAAWC,IAAX,EAAhB;;AAEA;AACAN,YAAYO,IAAZ,CAAiB,GAAjB,EAAsBC,qBAAtB,EAAiCC,kBAAjC,EAAyC,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACzD,MAAMC,KAAK;AACTC,QAAI,CAAC,yBAAD,CADK;AAETC,QAAI,CAAC,qBAAD,CAFK;AAGTC,QAAI,CAAC,0BAAD;AAHK,GAAX;AADyD,MAMlDC,GANkD,GAMhCP,GANgC,CAMlDO,GANkD;AAAA,MAM9CC,MAN8C,GAMhCR,GANgC,CAM9CQ,MAN8C;AAAA,MAMvCC,GANuC,GAMhCT,GANgC,CAMvCS,GANuC;;AAOzD,MAAIC,cAAJ;AACF;AACE,MAAGF,WAAS,EAAZ,EAAgB,OAAOP,IAAIU,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB,EAACgB,SAAS,gBAAV,EAArB,CAAP;;AAElB;AAX2D,uBAYNZ,IAAIa,IAAJ,CAASC,IAZH;AAAA,MAYlDC,aAZkD,kBAYlDA,aAZkD;AAAA,MAYpCC,QAZoC,kBAYpCA,QAZoC;AAAA,MAY3BC,MAZ2B,kBAY3BA,MAZ2B;AAAA,MAYpBC,KAZoB,kBAYpBA,KAZoB;AAAA,MAYdC,IAZc,kBAYdA,IAZc;AAazD;AACF;;AACEC,gBAAIC,OAAJ,CAAYC,OAAOC,MAAP,CAAc,EAAd,EAAiB,EAAChB,QAAD,EAAjB,EAAuB,EAACQ,4BAAD,EAAeC,kBAAf,EAAwBE,YAAxB,EAA8BD,cAA9B,EAAvB,CAAZ,EAA0E,QAA1E,EACCO,IADD,CACO,cAAM;AACXd,YAAQe,EAAR;AACA,QAAIC,UAAUP,KAAKQ,GAAL,CAAU,aAAK;AAC3B,aAAO,EAACC,UAAUH,EAAX,EAAeI,MAAMC,EAAEC,OAAvB,EAAgCC,OAAOF,EAAEE,KAAzC,EAAP;AACD,KAFa,CAAd;AAGAZ,kBAAIa,QAAJ,CAAaP,OAAb,EAAqB,cAArB;AACD,GAPD,EAQCF,IARD,CAQO;AAAA,WAAMJ,cAAIc,SAAJ,CAAc,EAACT,IAAIlB,GAAL,EAAU4B,QAAO,UAAjB,EAAd,EAA2C,MAA3C,CAAN;AAAA,GARP,EASCX,IATD,CASO,YAAM;AACX;AACAvB,QAAIU,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB,EAACgB,SAAYT,GAAGM,GAAH,EAAQ,CAAR,CAAZ,UAA2BC,KAA5B,EAArB;AACD,GAZD,EAaC0B,KAbD,CAaQ;AAAA,WAAOnC,IAAIU,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB,EAACgB,SAASyB,GAAV,EAArB,CAAP;AAAA,GAbR;AAcD,CA7BD;;AA+BA/C,YAAYgD,GAAZ,CAAgB,OAAhB,EAAyB,UAACtC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACzC;AACD,CAFD;;kBAIeZ,W","file":"order.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport { getLan,getUserId } from '../middleware/'\nimport api from '../api/'\n\nlet orderRouter = express.Router({\n  mergeParams: true\n})\n\norderRouter.use(bodyParser.json())\n\n// Save an Order and Order_Details\norderRouter.post('/', getUserId, getLan, (req,res,next) => {\n  const ui = {\n    en: ['We recieved your order:'],\n    es: ['Recibido su pedido:'],\n    bg: ['Поръчката Ви е получена:']\n  }\n  const {uid,member,lan} = req\n  let order\n// If Tester, don't INSERT in DB\n  if(member===64) return res.status(200).json({message: 'Order recieved'})\n\n// Prepare SQL Data Object:\n  const {user_location,delivery,fac_id,total,cart} = req.body.data\n  //console.log(uid, req.body.data)\n// Save ORDER & RETURN Success Status\n  api.saveOne(Object.assign({},{uid},{user_location,delivery,total,fac_id}),'orders')\n  .then( id => {\n    order = id\n    let details = cart.map( o => {\n      return {order_id: id, item: o.product, quant: o.quant}\n    })\n    api.saveMany(details,'order_detail')\n  })\n  .then( () => api.updateOne({id: uid, orders:'orders+1'},'user') )\n  .then( () => {\n    //req.mediator.emit('new.incoming.order')\n    res.status(200).json({message: `${ui[lan][0]} #${order}`})\n  } )\n  .catch( err => res.status(500).json({message: err}) )\n})\n\norderRouter.get('/:fac', (req,res,next) => {\n  // Get Pending Orders:\n})\n\nexport default orderRouter\n"]}