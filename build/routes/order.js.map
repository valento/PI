{"version":3,"sources":["../../server/routes/order.js"],"names":["orderRouter","express","Router","mergeParams","use","bodyParser","json","post","getUserId","req","res","next","uid","member","order","status","message","body","data","user_location","delivery","fac_id","total","cart","api","saveOne","Object","assign","then","id","details","map","order_id","item","o","product","quant","saveMany","updateOne","orders","catch","err","get"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAIA,cAAcC,kBAAQC,MAAR,CAAe;AAC/BC,eAAa;AADkB,CAAf,CAAlB;;AAIAH,YAAYI,GAAZ,CAAgBC,qBAAWC,IAAX,EAAhB;;AAEAN,YAAYO,IAAZ,CAAiB,GAAjB,EAAsBC,qBAAtB,EAAiC,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAAA,MAC1CC,GAD0C,GAC5BH,GAD4B,CAC1CG,GAD0C;AAAA,MACtCC,MADsC,GAC5BJ,GAD4B,CACtCI,MADsC;;AAEjD,MAAIC,cAAJ;AACF;AACE,MAAGD,WAAS,EAAZ,EAAgB,OAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB,EAACU,SAAS,gBAAV,EAArB,CAAP;;AAElB;AANmD,uBAOEP,IAAIQ,IAAJ,CAASC,IAPX;AAAA,MAO1CC,aAP0C,kBAO1CA,aAP0C;AAAA,MAO5BC,QAP4B,kBAO5BA,QAP4B;AAAA,MAOnBC,MAPmB,kBAOnBA,MAPmB;AAAA,MAOZC,KAPY,kBAOZA,KAPY;AAAA,MAONC,IAPM,kBAONA,IAPM;AAQjD;;AACAC,gBAAIC,OAAJ,CAAYC,OAAOC,MAAP,CAAc,EAAd,EAAiB,EAACf,QAAD,EAAjB,EAAuB,EAACO,4BAAD,EAAeC,kBAAf,EAAwBE,YAAxB,EAA8BD,cAA9B,EAAvB,CAAZ,EAA0E,QAA1E,EACCO,IADD,CACO,cAAM;AACXd,YAAQe,EAAR;AACA,QAAIC,UAAUP,KAAKQ,GAAL,CAAU,aAAK;AAC3B,aAAO,EAACC,UAAUH,EAAX,EAAeI,MAAMC,EAAEC,OAAvB,EAAgCC,OAAOF,EAAEE,KAAzC,EAAP;AACD,KAFa,CAAd;AAGAZ,kBAAIa,QAAJ,CAAaP,OAAb,EAAqB,cAArB;AACD,GAPD,EAQCF,IARD,CAQO;AAAA,WAAMJ,cAAIc,SAAJ,CAAc,EAACT,IAAIjB,GAAL,EAAU2B,QAAO,UAAjB,EAAd,EAA2C,MAA3C,CAAN;AAAA,GARP,EASCX,IATD,CASO,YAAM;AACX;AACAlB,QAAIK,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB,EAACU,qBAAmBF,KAAnB,cAAD,EAArB;AACD,GAZD,EAaC0B,KAbD,CAaQ;AAAA,WAAO9B,IAAIK,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB,EAACU,SAASyB,GAAV,EAArB,CAAP;AAAA,GAbR;AAcD,CAvBD;;AAyBAzC,YAAY0C,GAAZ,CAAgB,OAAhB,EAAyB,UAACjC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACzC;AACD,CAFD;;kBAIeX,W","file":"order.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport { getLan,getUserId } from '../middleware/'\nimport api from '../api/'\n\nlet orderRouter = express.Router({\n  mergeParams: true\n})\n\norderRouter.use(bodyParser.json())\n\norderRouter.post('/', getUserId, (req,res,next) => {\n  const {uid,member} = req\n  let order\n// If Tester, don't INSERT in DB\n  if(member===64) return res.status(200).json({message: 'Order recieved'})\n\n// Prepare SQL Data Object:\n  const {user_location,delivery,fac_id,total,cart} = req.body.data\n  //console.log(uid, req.body.data)\n  api.saveOne(Object.assign({},{uid},{user_location,delivery,total,fac_id}),'orders')\n  .then( id => {\n    order = id\n    let details = cart.map( o => {\n      return {order_id: id, item: o.product, quant: o.quant}\n    })\n    api.saveMany(details,'order_detail')\n  })\n  .then( () => api.updateOne({id: uid, orders:'orders+1'},'user') )\n  .then( () => {\n    //req.mediator.emit('new.incoming.order')\n    res.status(200).json({message: `Order #${order} recieved`})\n  } )\n  .catch( err => res.status(500).json({message: err}) )\n})\n\norderRouter.get('/:fac', (req,res,next) => {\n  // Get Pending Orders:\n})\n\nexport default orderRouter\n"]}