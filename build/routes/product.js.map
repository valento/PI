{"version":3,"sources":["../../server/routes/product.js"],"names":["productRouter","express","Router","mergeParams","use","bodyParser","json","get","req","res","next","lan","params","api","getList","type","then","products","response","forEach","entry","c_status","id","promo","price","price_pos","list","category","klass","prod_time","push","name","JSON","parse","dscr","descr","status","catch","messages"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,gBAAgBC,kBAAQC,MAAR,CAAe;AACjCC,eAAa;AADoB,CAAf,CAApB;;AAIAH,cAAcI,GAAd,CAAkBC,qBAAWC,IAAX,EAAlB;;AAEAN,cAAcO,GAAd,CAAkB,OAAlB,EAA2B,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAAA,MACtCC,GADsC,GAC/BH,IAAII,MAD2B,CACtCD,GADsC;AAE7C;;AACEE,gBAAIC,OAAJ,CAAY,SAAZ,EAAsB,CAAC,GAAD,CAAtB,EAA4B,EAACC,MAAK,CAAN,EAA5B,EACCC,IADD,CACO,oBAAY;AACjB,QAAIC,WAAW,EAAf;AACAC,aAASC,OAAT,CAAkB,iBAAS;AACzB,UAAGC,MAAMC,QAAN,KAAiB,CAApB,EAAsB;AAAA,YACZC,EADY,GAC+CF,KAD/C,CACZE,EADY;AAAA,YACTC,KADS,GAC+CH,KAD/C,CACTG,KADS;AAAA,YACHC,KADG,GAC+CJ,KAD/C,CACHI,KADG;AAAA,YACGC,SADH,GAC+CL,KAD/C,CACGK,SADH;AAAA,YACaC,IADb,GAC+CN,KAD/C,CACaM,IADb;AAAA,YACkBC,QADlB,GAC+CP,KAD/C,CACkBO,QADlB;AAAA,YAC2BC,KAD3B,GAC+CR,KAD/C,CAC2BQ,KAD3B;AAAA,YACiCC,SADjC,GAC+CT,KAD/C,CACiCS,SADjC;;AAEpBZ,iBAASa,IAAT,YAAeC,MAAMC,KAAKC,KAAL,CAAWb,MAAMW,IAAjB,EAAuBpB,GAAvB,CAArB,EAAkDuB,MAAMF,KAAKC,KAAL,CAAWb,MAAMe,KAAjB,EAAwBxB,GAAxB,CAAxD,IAAwF,EAACW,MAAD,EAAIC,YAAJ,EAAUC,YAAV,EAAgBE,UAAhB,EAAqBC,kBAArB,EAA8BC,YAA9B,EAAxF;AACD;AACF,KALD;AAMAnB,QAAI2B,MAAJ,CAAW,GAAX,EAAgB9B,IAAhB,CAAqBW,QAArB;AACD,GAVD,EAWCoB,KAXD,CAWO,eAAO;AAAE5B,QAAI2B,MAAJ,CAAW,GAAX,EAAgB9B,IAAhB,CAAqB,EAACgC,UAAU,UAAX,EAArB;AAA8C,GAX9D;AAYD,CAfD;;kBAiBetC,a","file":"product.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport requestLanguage from 'express-request-language'\nimport api from '../api/'\n\nlet productRouter = express.Router({\n  mergeParams: true\n})\n\nproductRouter.use(bodyParser.json())\n\nproductRouter.get('/:lan', (req,res,next) => {\n  let {lan} = req.params\n// get only commercial products {type:1}:\n  api.getList('product',['*'],{type:1})\n  .then( response => {\n    let products = []\n    response.forEach( entry => {\n      if(entry.c_status===4){\n        const { id,promo,price,price_pos,list,category,klass,prod_time } = entry\n        products.push({name: JSON.parse(entry.name)[lan], dscr: JSON.parse(entry.descr)[lan],...{id,promo,price,list,category,klass}})\n      }\n    })\n    res.status(200).json(products)\n  })\n  .catch(err => { res.status(500).json({messages: 'Wrong...'}) })\n})\n\nexport default productRouter\n"]}