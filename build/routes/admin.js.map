{"version":3,"sources":["../../server/routes/admin.js"],"names":["adminRouter","express","Router","mergeParams","use","bodyParser","json","get","languages","getLan","req","res","next","uid","params","data","api","getOneReference","then","response","name","id","number","street","JSON","parse","lan","isNaN","Object","assign","status","catch","messages","scope","tp","prs","r","type","by","city","Number","street_id","getList","map","title","entry","language","c_status","cty","post","body","msgCap","charAt","toUpperCase","slice","console","log","uniqid","time","saveOneLocation","message","err","rows","table","fac_id","Array","from","Set","e","list","length","delivery","user_location","ordered_at","pick_up_time","order_promo","rest","updateMany","error"],"mappings":"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","file":"admin.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport requestLanguage from 'express-request-language'\nimport { getLan,orderListener } from '../middleware/'\nimport api from '../api/'\nimport uniqid from 'uniqid'\n\nlet adminRouter = express.Router({\n  mergeParams: true\n})\n\nadminRouter.use(bodyParser.json())\n//adminRouter.use(orderListener(mediator))\n\nadminRouter.get('/location/ref/:uid', requestLanguage({\n  languages: ['en','es']\n}), getLan, (req,res,next) => {\n  const { uid } = req.params\n  let data\n  api.getOneReference({uid},'location')\n  .then( response => {\n    const { name,id,number } = response[0]\n    let street = JSON.parse(name)[req.lan]\n    if(isNaN(uid)){\n      data = Object.assign({},{number},{id},{street})\n    } else {\n      data = Object.assign({},{number},{street})\n    }\n    res.status(200).json(data)\n  })\n  .catch( err => res.status(500).json({messages: 'Wrong...'}) )\n})\n\nadminRouter.get('/location/:type/:by', requestLanguage({\n  languages: ['en','es']\n}), getLan, (req,res,next) => {\n  let scope = ['*']\n  let params = {}, data = {}, tp='', prs=false, r=[]\n  let { type,by } = req.params\n  switch(req.params.type) {\n    case 'street':\n      params.city= Number(req.params.by)\n      tp = 'streets'\n      prs = true\n    break\n    case 'location':\n      tp = 'locations'\n      params.street_id= Number(req.params.by)\n    break\n    default: params.city = Number(req.params.by)\n  }\n\n  api.getList(type,scope,params).then( response => {\n    if (prs) {\n      r = response.map( entry => {\n        return {title: JSON.parse(entry.name)[req.lan], id: entry.id}//req.language\n      })\n    } else {\n      r = response.map( entry => {\n// if location type is basic:\n        if(entry.type===32){return {title: entry.number, id: entry.id}}\n      })\n    }\n    data[tp] = r\n    res.status(200).json(data)\n  })\n  .catch( err => res.status(500).json({messages: 'Something went wrong!'}) )\n})\n\nadminRouter.get('/location', requestLanguage({\n  languages: ['en','es']\n}), getLan, (req,res,next) => {\n  let data = {},\n      params = {}\n      //lan = req.language==='es'? 'es' : 'bg'\n      if(req.lan) {\n        const {lan} = req\n      } else {\n        let lan = req.language==='es'? 'es' : 'bg'\n      }\n  params.c_status = 4\n  api.getList('city',['id','name'],params).then( response => {\n    const cty = response.map( entry => {\n      return {title: JSON.parse(entry.name)[lan], id: entry.id}//req.language\n    })\n    data.city = cty\n    res.status(200).json(data)\n  })\n})\n\n// MAKE new LOCATION (a building): Street_ID, City_ID, Number, uid(for refferets program):\nadminRouter.post('/location/:type', (req,res,next) => {\n  const { data } = req.body\n  const { type } = req.params\n  let msgCap = type.charAt(0).toUpperCase() + type.slice(1)\n  console.log(msgCap + ' Save: ',data,type)\n// unique ID for chained orders ref\n  if (type === 'location') {\n    data.uid = uniqid.time()\n  }\n  api.saveOneLocation(data,type)\n  .then(res.status(200).json({message: `${msgCap} Saved!`}))\n  .catch( err => console.log('Error',err))\n})\n\n// =========== ADMIN FACs: ================================================\n// ----------- BAKER GET ORDERS: ------------------------------------------\nadminRouter.get('/fac/:id/:table', (req,res,next) => {\n  let rows = []\n  //req.mediator.emit('baker.login')\n  const { id,table } = req.params\n  api.getList(table,['*'],{fac_id:id, status: 1})\n  .then( response => {\n    rows = Array.from(new Set(response.map( e => e.id)))\n    console.log(rows)\n    let list = []\n    if( response.length > 0 ) {\n      list = response.map( e => {\nconst { id,uid,delivery,user_location,ordered_at,pick_up_time,order_promo,...rest} = e\nreturn { id,uid,delivery,user_location,ordered_at,pick_up_time,order_promo,rest }\n      })\n      api.updateMany({id: rows, status:2},'orders')\n      .then( () => res.status(200).json(list) )\n\n    } else {\n      res.status(404).json({error: {message: 'No Orders...'}})\n    }\n  })\n  .catch( err => res.status(500).json({error: {message: 'Something went wrong'}}))\n})\n// ========================================================================\n\n//adminRouter.post('/locations/loc')\n\nexport default adminRouter\n\n// SZ, HD, lat:42.430320, lng:25.622825\n"]}