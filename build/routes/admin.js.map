{"version":3,"sources":["../../server/routes/admin.js"],"names":["adminRouter","express","Router","mergeParams","use","bodyParser","json","get","languages","getLan","req","res","next","console","log","lan","uid","params","data","api","getOneReference","then","response","name","id","number","street","JSON","parse","isNaN","Object","assign","status","catch","messages","scope","tp","prs","r","type","by","city","Number","street_id","getList","map","title","entry","language","c_status","cty","post","body","msgCap","charAt","toUpperCase","slice","uniqid","time","saveOneLocation","message","err","table","fac_id","list","length","e","delivery","user_location","fc_id","ordered_at","pick_up_time","error"],"mappings":"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","file":"admin.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport requestLanguage from 'express-request-language'\nimport { getLan,orderListener } from '../middleware/'\nimport api from '../api/'\nimport uniqid from 'uniqid'\n\nlet adminRouter = express.Router({\n  mergeParams: true\n})\n\nadminRouter.use(bodyParser.json())\n//adminRouter.use(orderListener(mediator))\n\nadminRouter.get('/location/ref/:uid', requestLanguage({\n  languages: ['en','es']\n}), getLan, (req,res,next) => {\n  console.log('Get location in: ',req.lan)\n  console.log('Get user location by: ',uid)\n  const {uid} = req.params\n  let data\n  api.getOneReference({uid},'location')\n  .then( response => {\n    const { name,id,number } = response[0]\n    let street = JSON.parse(name)[req.lan]\n    if(isNaN(uid)){\n      data = Object.assign({},{number},{id},{street})\n    } else {\n      data = Object.assign({},{number},{street})\n    }\n    res.status(200).json(data)\n  })\n  .catch(err => { res.status(500).json({messages: 'Wrong...'}) })\n})\n\nadminRouter.get('/location/:type/:by', requestLanguage({\n  languages: ['en','es']\n}), getLan, (req,res,next) => {\n  let scope = ['*']\n  let params = {}, data = {}, tp='', prs=false, r=[]\n  let { type,by } = req.params\n  switch(req.params.type) {\n    case 'street':\n      params.city= Number(req.params.by)\n      tp = 'streets'\n      prs = true\n    break\n    case 'location':\n      tp = 'locations'\n      params.street_id= Number(req.params.by)\n    break\n    default: params.city = Number(req.params.by)\n  }\n\n  api.getList(type,scope,params).then( response => {\n    if (prs) {\n      r = response.map( entry => {\n        return {title: JSON.parse(entry.name)[req.lan], id: entry.id}//req.language\n      })\n    } else {\n      r = response.map( entry => {\n// if location type is basic:\n        if(entry.type===32){return {title: entry.number, id: entry.id}}\n      })\n    }\n    data[tp] = r\n    res.status(200).json(data)\n  })\n  .catch( err => res.status(500).json({messages: 'Something went wrong!'}))\n})\n\nadminRouter.get('/location', requestLanguage({\n  languages: ['en','es']\n}), getLan, (req,res,next) => {\n  let data = {},\n      params = {}\n      //lan = req.language==='es'? 'es' : 'bg'\n      if(req.lan) {\n        const {lan} = req\n      } else {\n        let lan = req.language==='es'? 'es' : 'bg'\n      }\n  params.c_status = 4\n  api.getList('city',['id','name'],params).then( response => {\n    const cty = response.map( entry => {\n      return {title: JSON.parse(entry.name)[lan], id: entry.id}//req.language\n    })\n    data.city = cty\n    res.status(200).json(data)\n  })\n})\n\n// MAKE a LOCATION (a building): Street_ID, City_ID, Number\nadminRouter.post('/location/:type', (req,res,next) => {\n  const { data } = req.body\n  const { type } = req.params\n  let msgCap = type.charAt(0).toUpperCase() + type.slice(1)\n  console.log(msgCap + ' Save: ',data,type)\n  if (type === 'location') {\n    data.uid = uniqid.time()\n  }\n  api.saveOneLocation(data,type)\n  .then(res.status(200).json({message: `${msgCap} Saved!`}))\n  .catch( err => console.log('Error',err))\n})\n\n// =========== ADMIN FACs: ================================================\n// ----------- BAKER GET ORDERS: ------------------------------------------\nadminRouter.get('/fac/:id/:table', (req,res,next) => {\n  //req.mediator.emit('baker.login')\n  const { id,table } = req.params\n  api.getList(table,['*'],Object.assign({fac_id:id},{status: 1}))\n  .then( response => {\n    let list = []\n    if( response.length > 0 ) {\n      list = response.map( e => {\n        const { id,uid,delivery,user_location,fc_id,ordered_at,pick_up_time } = e\n        return { id,uid,delivery,user_location,fc_id,ordered_at,pick_up_time }\n      })\n      res.status(200).json(list)\n    } else {\n      res.status(404).json({error: {message: 'New Orders not found!'}})\n    }\n    })\n  .catch( err => res.status(500).json({error: {message: 'Something went wrong'}}))\n})\n// ========================================================================\n\n//adminRouter.post('/locations/loc')\n\nexport default adminRouter\n\n// SZ, HD, lat:42.430320, lng:25.622825\n"]}